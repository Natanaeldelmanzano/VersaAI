# 🚀 Workflow de Producción - VersaAI
# Configuración automatizada de despliegue y monitoreo para Trae AI

name: "VersaAI Production Workflow"
description: "Despliegue automatizado y monitoreo de producción para VersaAI"
version: "1.0.0"

# Configuración del entorno de producción
environment:
  name: "production"
  region: "us-east-1"
  availability_zones: ["us-east-1a", "us-east-1b"]
  auto_scaling: true
  high_availability: true

# Configuración de infraestructura
infrastructure:
  # Configuración de servidores
  servers:
    backend:
      type: "container"
      image: "versaai/backend:latest"
      replicas: 3
      resources:
        cpu: "1000m"
        memory: "2Gi"
        storage: "10Gi"
      health_check:
        path: "/api/health"
        interval: 30
        timeout: 10
        retries: 3
    
    frontend:
      type: "static"
      cdn_enabled: true
      compression: true
      caching:
        static_assets: "1y"
        html: "1h"
        api_responses: "5m"
    
    nginx:
      type: "load_balancer"
      ssl_enabled: true
      rate_limiting: true
      compression: true
      security_headers: true
  
  # Base de datos
  database:
    type: "postgresql"
    version: "15"
    instance_class: "db.t3.medium"
    storage: "100GB"
    backup_retention: 30
    multi_az: true
    encryption: true
    monitoring: true
  
  # Cache
  cache:
    type: "redis"
    version: "7.0"
    instance_class: "cache.t3.micro"
    cluster_mode: true
    backup_enabled: true
    encryption: true

# Pipeline de despliegue
deployment:
  strategy: "blue_green"
  
  # Etapas del pipeline
  stages:
    # Preparación
    preparation:
      name: "Preparación del Despliegue"
      
      steps:
        - name: "validate_environment"
          description: "Validar variables de entorno"
          command: "python scripts/validate_env.py"
          required: true
        
        - name: "check_dependencies"
          description: "Verificar dependencias"
          command: "python scripts/check_deps.py"
          required: true
        
        - name: "backup_database"
          description: "Backup de base de datos"
          command: "pg_dump $DATABASE_URL > backup_$(date +%Y%m%d_%H%M%S).sql"
          required: true
        
        - name: "notify_team"
          description: "Notificar inicio de despliegue"
          command: "python scripts/notify_deployment.py --stage=start"
          required: false
    
    # Testing pre-despliegue
    pre_deployment_testing:
      name: "Testing Pre-Despliegue"
      
      steps:
        - name: "run_unit_tests"
          description: "Ejecutar tests unitarios"
          command: "pytest tests/unit/ -v --tb=short"
          timeout: 300
          required: true
        
        - name: "run_integration_tests"
          description: "Ejecutar tests de integración"
          command: "pytest tests/integration/ -v --tb=short"
          timeout: 600
          required: true
        
        - name: "security_scan"
          description: "Escaneo de seguridad"
          command: "safety check && bandit -r src/"
          timeout: 300
          required: true
        
        - name: "performance_baseline"
          description: "Establecer baseline de performance"
          command: "python scripts/performance_baseline.py"
          timeout: 600
          required: false
    
    # Build y empaquetado
    build:
      name: "Build y Empaquetado"
      
      steps:
        - name: "build_backend"
          description: "Build del backend"
          command: "docker build -t versaai/backend:$BUILD_VERSION ."
          working_directory: "./"
          timeout: 900
          required: true
        
        - name: "build_frontend"
          description: "Build del frontend"
          command: "npm run build"
          working_directory: "./frontend"
          timeout: 600
          required: true
        
        - name: "optimize_assets"
          description: "Optimizar assets estáticos"
          command: "npm run optimize"
          working_directory: "./frontend"
          timeout: 300
          required: false
        
        - name: "push_images"
          description: "Subir imágenes a registry"
          command: "docker push versaai/backend:$BUILD_VERSION"
          timeout: 600
          required: true
    
    # Despliegue a staging
    staging_deployment:
      name: "Despliegue a Staging"
      
      steps:
        - name: "deploy_to_staging"
          description: "Desplegar a entorno de staging"
          command: "kubectl apply -f k8s/staging/"
          timeout: 900
          required: true
        
        - name: "wait_for_readiness"
          description: "Esperar que los servicios estén listos"
          command: "kubectl wait --for=condition=ready pod -l app=versaai --timeout=300s"
          timeout: 360
          required: true
        
        - name: "smoke_tests"
          description: "Tests de humo en staging"
          command: "pytest tests/smoke/ --base-url=$STAGING_URL"
          timeout: 300
          required: true
        
        - name: "load_test_staging"
          description: "Test de carga en staging"
          command: "locust -f tests/load/locustfile.py --headless -u 50 -r 5 -t 300s --host=$STAGING_URL"
          timeout: 360
          required: false
    
    # Despliegue a producción
    production_deployment:
      name: "Despliegue a Producción"
      approval_required: true
      
      steps:
        - name: "create_blue_environment"
          description: "Crear entorno blue (nuevo)"
          command: "kubectl apply -f k8s/production/blue/"
          timeout: 900
          required: true
        
        - name: "migrate_database"
          description: "Ejecutar migraciones de base de datos"
          command: "alembic upgrade head"
          timeout: 600
          required: true
        
        - name: "warm_up_services"
          description: "Calentar servicios"
          command: "python scripts/warmup.py --environment=blue"
          timeout: 300
          required: true
        
        - name: "health_check_blue"
          description: "Verificar salud del entorno blue"
          command: "python scripts/health_check.py --environment=blue"
          timeout: 180
          required: true
        
        - name: "switch_traffic"
          description: "Cambiar tráfico a entorno blue"
          command: "kubectl patch service versaai-service -p '{\"spec\":{\"selector\":{\"version\":\"blue\"}}}'"
          timeout: 60
          required: true
        
        - name: "monitor_switch"
          description: "Monitorear el cambio de tráfico"
          command: "python scripts/monitor_switch.py --duration=300"
          timeout: 360
          required: true
        
        - name: "cleanup_green"
          description: "Limpiar entorno green (anterior)"
          command: "kubectl delete -f k8s/production/green/"
          timeout: 300
          required: false
          delay: 1800  # Esperar 30 minutos antes de limpiar
    
    # Post-despliegue
    post_deployment:
      name: "Actividades Post-Despliegue"
      
      steps:
        - name: "verify_deployment"
          description: "Verificar despliegue exitoso"
          command: "python scripts/verify_deployment.py"
          timeout: 300
          required: true
        
        - name: "update_monitoring"
          description: "Actualizar configuración de monitoreo"
          command: "python scripts/update_monitoring.py"
          timeout: 120
          required: true
        
        - name: "notify_success"
          description: "Notificar despliegue exitoso"
          command: "python scripts/notify_deployment.py --stage=success"
          required: true
        
        - name: "update_documentation"
          description: "Actualizar documentación de release"
          command: "python scripts/update_release_docs.py"
          required: false

# Configuración de rollback
rollback:
  automatic:
    enabled: true
    triggers:
      - "health_check_failure"
      - "error_rate_threshold"
      - "response_time_threshold"
    
    thresholds:
      error_rate: 5  # %
      response_time: 2000  # ms
      success_rate: 95  # %
    
    monitoring_window: 300  # segundos
  
  manual:
    enabled: true
    approval_required: true
    
    steps:
      - name: "switch_to_previous"
        description: "Cambiar a versión anterior"
        command: "kubectl patch service versaai-service -p '{\"spec\":{\"selector\":{\"version\":\"green\"}}}'"
      
      - name: "verify_rollback"
        description: "Verificar rollback exitoso"
        command: "python scripts/verify_rollback.py"
      
      - name: "notify_rollback"
        description: "Notificar rollback"
        command: "python scripts/notify_deployment.py --stage=rollback"

# Monitoreo de producción
monitoring:
  # Métricas de aplicación
  application_metrics:
    - name: "response_time"
      threshold: 500  # ms
      alert_threshold: 1000  # ms
    
    - name: "error_rate"
      threshold: 1  # %
      alert_threshold: 5  # %
    
    - name: "throughput"
      threshold: 100  # requests/second
      alert_threshold: 50  # requests/second
    
    - name: "active_users"
      monitoring_interval: 60  # segundos
    
    - name: "database_connections"
      threshold: 80  # % of max connections
      alert_threshold: 90  # %
  
  # Métricas de infraestructura
  infrastructure_metrics:
    - name: "cpu_usage"
      threshold: 70  # %
      alert_threshold: 85  # %
    
    - name: "memory_usage"
      threshold: 80  # %
      alert_threshold: 90  # %
    
    - name: "disk_usage"
      threshold: 75  # %
      alert_threshold: 85  # %
    
    - name: "network_latency"
      threshold: 100  # ms
      alert_threshold: 200  # ms
  
  # Health checks
  health_checks:
    - name: "api_health"
      endpoint: "/api/health"
      interval: 30  # segundos
      timeout: 10  # segundos
      expected_status: 200
    
    - name: "database_health"
      endpoint: "/api/health/database"
      interval: 60  # segundos
      timeout: 15  # segundos
    
    - name: "cache_health"
      endpoint: "/api/health/cache"
      interval: 60  # segundos
      timeout: 10  # segundos
    
    - name: "ai_service_health"
      endpoint: "/api/health/ai"
      interval: 120  # segundos
      timeout: 30  # segundos
  
  # Logs
  logging:
    level: "INFO"
    retention: 30  # días
    
    aggregation:
      enabled: true
      service: "elasticsearch"
    
    alerts:
      - pattern: "ERROR"
        threshold: 10  # errores por minuto
      - pattern: "CRITICAL"
        threshold: 1  # errores críticos por minuto
      - pattern: "Authentication failed"
        threshold: 20  # intentos fallidos por minuto

# Configuración de alertas
alerting:
  channels:
    - type: "email"
      recipients: ["devops@versaai.com", "team@versaai.com"]
    
    - type: "slack"
      webhook: "$SLACK_WEBHOOK_URL"
      channel: "#alerts-production"
    
    - type: "pagerduty"
      service_key: "$PAGERDUTY_SERVICE_KEY"
      severity: "critical"
  
  escalation:
    levels:
      - delay: 0  # inmediato
        channels: ["slack"]
      
      - delay: 300  # 5 minutos
        channels: ["email"]
      
      - delay: 900  # 15 minutos
        channels: ["pagerduty"]
  
  rules:
    - name: "high_error_rate"
      condition: "error_rate > 5%"
      severity: "critical"
      escalation_level: 3
    
    - name: "slow_response_time"
      condition: "response_time > 2000ms"
      severity: "warning"
      escalation_level: 1
    
    - name: "service_down"
      condition: "health_check_failed"
      severity: "critical"
      escalation_level: 3
    
    - name: "high_cpu_usage"
      condition: "cpu_usage > 85%"
      severity: "warning"
      escalation_level: 2

# Configuración de backup
backup:
  database:
    frequency: "daily"
    time: "02:00"
    retention: 30  # días
    compression: true
    encryption: true
    
    incremental:
      enabled: true
      frequency: "hourly"
      retention: 7  # días
  
  files:
    frequency: "daily"
    time: "03:00"
    retention: 14  # días
    
    paths:
      - "/app/uploads"
      - "/app/logs"
      - "/app/config"
  
  verification:
    enabled: true
    frequency: "weekly"
    restore_test: true

# Configuración de seguridad
security:
  ssl:
    enabled: true
    certificate_auto_renewal: true
    min_tls_version: "1.2"
    cipher_suites: "modern"
  
  firewall:
    enabled: true
    rules:
      - port: 80
        protocol: "tcp"
        source: "0.0.0.0/0"
      - port: 443
        protocol: "tcp"
        source: "0.0.0.0/0"
      - port: 22
        protocol: "tcp"
        source: "admin_ips"
  
  rate_limiting:
    enabled: true
    rules:
      - path: "/api/*"
        limit: "1000/hour"
        burst: 100
      - path: "/api/auth/*"
        limit: "100/hour"
        burst: 10
  
  security_headers:
    enabled: true
    headers:
      - "X-Content-Type-Options: nosniff"
      - "X-Frame-Options: DENY"
      - "X-XSS-Protection: 1; mode=block"
      - "Strict-Transport-Security: max-age=31536000"
  
  vulnerability_scanning:
    enabled: true
    frequency: "daily"
    auto_patch: false
    
    scanners:
      - "trivy"
      - "clair"
      - "snyk"

# Configuración de performance
performance:
  auto_scaling:
    enabled: true
    
    backend:
      min_replicas: 2
      max_replicas: 10
      target_cpu: 70  # %
      target_memory: 80  # %
    
    database:
      read_replicas: 2
      auto_failover: true
  
  caching:
    levels:
      - type: "application"
        ttl: 300  # segundos
      - type: "database"
        ttl: 600  # segundos
      - type: "cdn"
        ttl: 3600  # segundos
  
  optimization:
    compression: true
    minification: true
    image_optimization: true
    lazy_loading: true

# Variables de entorno de producción
environment_variables:
  ENVIRONMENT: "production"
  DEBUG: "false"
  LOG_LEVEL: "INFO"
  DATABASE_URL: "$PROD_DATABASE_URL"
  REDIS_URL: "$PROD_REDIS_URL"
  SECRET_KEY: "$PROD_SECRET_KEY"
  GROQ_API_KEY: "$PROD_GROQ_API_KEY"
  JWT_SECRET_KEY: "$PROD_JWT_SECRET_KEY"
  CORS_ORIGINS: "https://versaai.com,https://app.versaai.com"
  ALLOWED_HOSTS: "versaai.com,app.versaai.com"
  SENTRY_DSN: "$SENTRY_DSN"
  NEW_RELIC_LICENSE_KEY: "$NEW_RELIC_LICENSE_KEY"

# Configuración de mantenimiento
maintenance:
  windows:
    - day: "sunday"
      time: "02:00-04:00"
      timezone: "UTC"
  
  notifications:
    advance_notice: 24  # horas
    channels: ["email", "slack"]
  
  procedures:
    - name: "database_maintenance"
      frequency: "monthly"
      duration: 60  # minutos
    
    - name: "security_updates"
      frequency: "weekly"
      duration: 30  # minutos
    
    - name: "performance_optimization"
      frequency: "quarterly"
      duration: 120  # minutos

# Configuración de disaster recovery
disaster_recovery:
  rpo: 60  # Recovery Point Objective en minutos
  rto: 240  # Recovery Time Objective en minutos
  
  backup_sites:
    - region: "us-west-2"
      type: "warm_standby"
    
    - region: "eu-west-1"
      type: "cold_standby"
  
  procedures:
    - name: "database_failover"
      automation_level: "automatic"
      max_downtime: 60  # segundos
    
    - name: "application_failover"
      automation_level: "manual"
      max_downtime: 300  # segundos
    
    - name: "full_site_recovery"
      automation_level: "manual"
      max_downtime: 3600  # segundos

# Hooks de producción
hooks:
  pre_deployment:
    - "validate_configuration"
    - "check_dependencies"
    - "backup_current_state"
  
  post_deployment:
    - "verify_health"
    - "update_monitoring"
    - "notify_stakeholders"
  
  on_failure:
    - "capture_logs"
    - "create_incident"
    - "notify_oncall"
    - "initiate_rollback"
  
  on_success:
    - "update_status_page"
    - "archive_artifacts"
    - "update_documentation"