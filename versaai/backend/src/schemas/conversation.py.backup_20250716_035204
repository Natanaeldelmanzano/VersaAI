from pydantic import BaseModel, Field, validator
from typing import Optional, Dict, Any, List
from datetime import datetime
from enum import Enum

class MessageType(str, Enum):
    """Message type enum"""
    USER = "user"
    ASSISTANT = "assistant"
    SYSTEM = "system"

class MessageStatus(str, Enum):
    """Message status enum"""
    PENDING = "pending"
    PROCESSING = "processing"
    COMPLETED = "completed"
    FAILED = "failed"

class ConversationStatus(str, Enum):
    """Conversation status enum"""
    ACTIVE = "active"
    CLOSED = "closed"
    ARCHIVED = "archived"

class MessageBase(BaseModel):
    """Base message schema"""
    content: str = Field(..., min_length=1, max_length=10000, description="Message content")
    message_type: MessageType = Field(..., description="Message type")

class MessageCreate(MessageBase):
    """Message creation schema"""
    conversation_id: int = Field(..., description="Conversation ID")
    context: Optional[Dict[str, Any]] = Field(None, description="Message context")
    metadata: Optional[Dict[str, Any]] = Field(None, description="Message metadata")

class MessageUpdate(BaseModel):
    """Message update schema"""
    content: Optional[str] = Field(None, min_length=1, max_length=10000, description="Message content")
    status: Optional[MessageStatus] = Field(None, description="Message status")
    metadata: Optional[Dict[str, Any]] = Field(None, description="Message metadata")

class MessageInDBBase(MessageBase):
    """Base message schema with database fields"""
    id: int = Field(..., description="Message ID")
    conversation_id: int = Field(..., description="Conversation ID")
    status: MessageStatus = Field(default=MessageStatus.COMPLETED, description="Message status")
    model_used: Optional[str] = Field(None, description="AI model used")
    tokens_used: Optional[int] = Field(None, description="Tokens used")
    response_time_ms: Optional[float] = Field(None, description="Response time in milliseconds")
    confidence_score: Optional[float] = Field(None, description="Confidence score")
    context: Optional[Dict[str, Any]] = Field(None, description="Message context")
    sources: Optional[List[Dict[str, Any]]] = Field(None, description="RAG sources")
    metadata: Dict[str, Any] = Field(default_factory=dict, description="Message metadata")
    created_at: datetime = Field(..., description="Creation timestamp")
    updated_at: datetime = Field(..., description="Last update timestamp")

    class Config:
        from_attributes = True

class Message(MessageInDBBase):
    """Message schema for API responses"""
    pass

class MessageWithSources(Message):
    """Message schema with RAG sources"""
    rag_sources: Optional[List[Dict[str, Any]]] = Field(None, description="RAG source documents")

class ConversationBase(BaseModel):
    """Base conversation schema"""
    title: Optional[str] = Field(None, max_length=200, description="Conversation title")
    summary: Optional[str] = Field(None, max_length=1000, description="Conversation summary")

class ConversationCreate(ConversationBase):
    """Conversation creation schema"""
    chatbot_id: int = Field(..., description="Chatbot ID")
    user_id: Optional[int] = Field(None, description="User ID (null for anonymous)")
    session_id: str = Field(..., description="Session ID")
    user_info: Optional[Dict[str, Any]] = Field(None, description="Anonymous user info")
    metadata: Optional[Dict[str, Any]] = Field(None, description="Conversation metadata")

class ConversationUpdate(BaseModel):
    """Conversation update schema"""
    title: Optional[str] = Field(None, max_length=200, description="Conversation title")
    summary: Optional[str] = Field(None, max_length=1000, description="Conversation summary")
    status: Optional[ConversationStatus] = Field(None, description="Conversation status")
    user_satisfaction: Optional[int] = Field(None, ge=1, le=5, description="User satisfaction rating")
    user_feedback: Optional[str] = Field(None, max_length=1000, description="User feedback")
    metadata: Optional[Dict[str, Any]] = Field(None, description="Conversation metadata")

class ConversationInDBBase(ConversationBase):
    """Base conversation schema with database fields"""
    id: int = Field(..., description="Conversation ID")
    chatbot_id: int = Field(..., description="Chatbot ID")
    user_id: Optional[int] = Field(None, description="User ID")
    session_id: str = Field(..., description="Session ID")
    status: ConversationStatus = Field(default=ConversationStatus.ACTIVE, description="Conversation status")
    is_active: bool = Field(default=True, description="Conversation active status")
    user_info: Optional[Dict[str, Any]] = Field(None, description="Anonymous user info")
    user_satisfaction: Optional[int] = Field(None, description="User satisfaction rating")
    user_feedback: Optional[str] = Field(None, description="User feedback")
    total_messages: int = Field(default=0, description="Total message count")
    analytics: Dict[str, Any] = Field(default_factory=dict, description="Analytics data")
    metadata: Dict[str, Any] = Field(default_factory=dict, description="Conversation metadata")
    created_at: datetime = Field(..., description="Creation timestamp")
    updated_at: datetime = Field(..., description="Last update timestamp")
    last_message_at: Optional[datetime] = Field(None, description="Last message timestamp")

    class Config:
        from_attributes = True

class Conversation(ConversationInDBBase):
    """Conversation schema for API responses"""
    pass

class ConversationWithMessages(Conversation):
    """Conversation schema with messages"""
    messages: List[Message] = Field(..., description="Conversation messages")

class ConversationWithLastMessage(Conversation):
    """Conversation schema with last message"""
    last_message: Optional[Message] = Field(None, description="Last message")
    duration_minutes: Optional[float] = Field(None, description="Conversation duration in minutes")
    is_anonymous: bool = Field(..., description="Is anonymous conversation")

class ConversationList(BaseModel):
    """Conversation list schema"""
    conversations: List[ConversationWithLastMessage] = Field(..., description="List of conversations")
    total: int = Field(..., description="Total number of conversations")
    page: int = Field(..., description="Current page")
    per_page: int = Field(..., description="Items per page")
    pages: int = Field(..., description="Total number of pages")

class ConversationStats(BaseModel):
    """Conversation statistics schema"""
    total_conversations: int = Field(..., description="Total conversations")
    active_conversations: int = Field(..., description="Active conversations")
    closed_conversations: int = Field(..., description="Closed conversations")
    avg_duration_minutes: float = Field(..., description="Average duration in minutes")
    avg_messages_per_conversation: float = Field(..., description="Average messages per conversation")
    avg_satisfaction: float = Field(..., description="Average satisfaction rating")
    satisfaction_responses: int = Field(..., description="Number of satisfaction responses")
    anonymous_conversations: int = Field(..., description="Anonymous conversations")
    registered_conversations: int = Field(..., description="Registered user conversations")

class ChatRequest(BaseModel):
    """Chat request schema"""
    message: str = Field(..., min_length=1, max_length=10000, description="User message")
    conversation_id: Optional[int] = Field(None, description="Existing conversation ID")
    session_id: str = Field(..., description="Session ID")
    user_info: Optional[Dict[str, Any]] = Field(None, description="Anonymous user info")
    context: Optional[Dict[str, Any]] = Field(None, description="Additional context")
    stream: bool = Field(default=False, description="Enable streaming response")

class ChatResponse(BaseModel):
    """Chat response schema"""
    message: str = Field(..., description="Assistant response")
    conversation_id: int = Field(..., description="Conversation ID")
    message_id: int = Field(..., description="Message ID")
    sources: Optional[List[Dict[str, Any]]] = Field(None, description="RAG sources")
    confidence_score: Optional[float] = Field(None, description="Confidence score")
    response_time_ms: float = Field(..., description="Response time in milliseconds")
    tokens_used: Optional[int] = Field(None, description="Tokens used")
    model_used: str = Field(..., description="AI model used")

class ConversationRating(BaseModel):
    """Conversation rating schema"""
    rating: int = Field(..., ge=1, le=5, description="Rating from 1 to 5")
    feedback: Optional[str] = Field(None, max_length=1000, description="Optional feedback")

class ConversationExport(BaseModel):
    """Conversation export schema"""
    format: str = Field(default="json", description="Export format (json, csv, txt)")
    include_metadata: bool = Field(default=True, description="Include metadata")
    include_analytics: bool = Field(default=False, description="Include analytics")
    date_from: Optional[datetime] = Field(None, description="Start date filter")
    date_to: Optional[datetime] = Field(None, description="End date filter")

class MessageSearch(BaseModel):
    """Message search schema"""
    query: str = Field(..., min_length=1, description="Search query")
    conversation_id: Optional[int] = Field(None, description="Filter by conversation")
    message_type: Optional[MessageType] = Field(None, description="Filter by message type")
    date_from: Optional[datetime] = Field(None, description="Start date filter")
    date_to: Optional[datetime] = Field(None, description="End date filter")
    limit: int = Field(default=50, ge=1, le=100, description="Result limit")

class MessageSearchResult(BaseModel):
    """Message search result schema"""
    messages: List[Message] = Field(..., description="Found messages")
    total: int = Field(..., description="Total results")
    query: str = Field(..., description="Search query")
    search_time_ms: float = Field(..., description="Search time in milliseconds")