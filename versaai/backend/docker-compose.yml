version: '3.8'

services:
  # PostgreSQL Database
  db:
    image: postgres:15-alpine
    container_name: versaai_db
    environment:
      POSTGRES_DB: versaai
      POSTGRES_USER: versaai_user
      POSTGRES_PASSWORD: versaai_password
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U versaai_user -d versaai"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - versaai_network
    restart: unless-stopped

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: versaai_redis
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    networks:
      - versaai_network
    restart: unless-stopped

  # VersaAI Backend API
  api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: versaai_api
    environment:
      # Database
      DATABASE_URL: postgresql://versaai_user:versaai_password@db:5432/versaai
      DATABASE_POOL_SIZE: 5
      DATABASE_POOL_TIMEOUT: 30
      
      # Redis
      REDIS_URL: redis://redis:6379/0
      REDIS_POOL_SIZE: 5
      REDIS_POOL_TIMEOUT: 30
      
      # Security
      SECRET_KEY: versaai-super-secret-key-development-only
      ACCESS_TOKEN_EXPIRE_MINUTES: 30
      REFRESH_TOKEN_EXPIRE_DAYS: 7
      PASSWORD_HASH_ROUNDS: 12
      
      # Groq AI
      GROQ_API_KEY: ${GROQ_API_KEY:-your-groq-api-key}
      GROQ_BASE_URL: https://api.groq.com/openai/v1
      GROQ_MODEL: mixtral-8x7b-32768
      GROQ_MAX_TOKENS: 2000
      GROQ_TEMPERATURE: 0.7
      GROQ_TIMEOUT: 30
      
      # Embedding Model
      EMBEDDING_MODEL_NAME: all-MiniLM-L6-v2
      EMBEDDING_MODEL_DIMENSION: 384
      EMBEDDING_BATCH_SIZE: 32
      
      # App Settings
      APP_NAME: VersaAI Platform
      DEBUG: "true"
      LOG_LEVEL: INFO
      LOG_FORMAT: "%(asctime)s - %(name)s - %(levelname)s - %(message)s"
      
      # CORS
      ALLOWED_HOSTS: '["localhost", "127.0.0.1", "0.0.0.0", "api"]'
      ALLOWED_ORIGINS: '["http://localhost:3000", "http://localhost:8080", "http://127.0.0.1:3000", "http://127.0.0.1:8080", "http://localhost:5173"]'
      CORS_ALLOW_CREDENTIALS: "true"
      CORS_ALLOW_METHODS: '["*"]'
      CORS_ALLOW_HEADERS: '["*"]'
      
      # File Upload
      MAX_FILE_SIZE_MB: 10
      MAX_FILES_PER_UPLOAD: 10
      ALLOWED_FILE_TYPES: '["pdf", "txt", "docx", "md", "html", "csv"]'
      UPLOAD_DIR: uploads
      
      # Rate Limiting
      RATE_LIMIT_ENABLED: "true"
      RATE_LIMIT_REQUESTS_PER_MINUTE: 60
      RATE_LIMIT_BURST: 10
    ports:
      - "8000:8000"
    volumes:
      - ./uploads:/app/uploads
      - ./logs:/app/logs
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - versaai_network
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
    name: versaai_postgres_data
  redis_data:
    driver: local
    name: versaai_redis_data

networks:
  versaai_network:
    driver: bridge
    name: versaai_network
    ipam:
      config:
        - subnet: 172.20.0.0/16