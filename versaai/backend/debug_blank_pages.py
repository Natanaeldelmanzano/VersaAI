#!/usr/bin/env python3
"""
Script para diagnosticar en detalle por qu√© las p√°ginas de documentaci√≥n se ven en blanco
"""

import requests
import re
from urllib.parse import urljoin

def analyze_html_content(url, content):
    """Analizar el contenido HTML en detalle"""
    print(f"\n{'='*60}")
    print(f"AN√ÅLISIS DETALLADO: {url}")
    print(f"{'='*60}")
    
    # Verificar longitud
    print(f"üìè Longitud del contenido: {len(content)} caracteres")
    
    # Verificar estructura HTML b√°sica
    has_html = bool(re.search(r'<html[^>]*>', content, re.IGNORECASE))
    has_head = bool(re.search(r'<head[^>]*>', content, re.IGNORECASE))
    has_body = bool(re.search(r'<body[^>]*>', content, re.IGNORECASE))
    
    print(f"üèóÔ∏è  Estructura HTML:")
    print(f"   - Tiene <html>: {'‚úÖ' if has_html else '‚ùå'}")
    print(f"   - Tiene <head>: {'‚úÖ' if has_head else '‚ùå'}")
    print(f"   - Tiene <body>: {'‚úÖ' if has_body else '‚ùå'}")
    
    # Verificar scripts
    scripts = re.findall(r'<script[^>]*src=["\']([^"\'>]+)["\'][^>]*>', content, re.IGNORECASE)
    inline_scripts = re.findall(r'<script[^>]*>([^<]+)</script>', content, re.IGNORECASE | re.DOTALL)
    
    print(f"\nüìú Scripts encontrados:")
    print(f"   - Scripts externos: {len(scripts)}")
    for i, script in enumerate(scripts[:5]):  # Mostrar solo los primeros 5
        print(f"     {i+1}. {script}")
    if len(scripts) > 5:
        print(f"     ... y {len(scripts) - 5} m√°s")
    
    print(f"   - Scripts inline: {len(inline_scripts)}")
    
    # Verificar CSS
    css_links = re.findall(r'<link[^>]*href=["\']([^"\'>]+)["\'][^>]*rel=["\']stylesheet["\'][^>]*>', content, re.IGNORECASE)
    css_links += re.findall(r'<link[^>]*rel=["\']stylesheet["\'][^>]*href=["\']([^"\'>]+)["\'][^>]*>', content, re.IGNORECASE)
    
    print(f"\nüé® CSS encontrado:")
    print(f"   - Hojas de estilo externas: {len(css_links)}")
    for i, css in enumerate(css_links[:3]):  # Mostrar solo las primeras 3
        print(f"     {i+1}. {css}")
    if len(css_links) > 3:
        print(f"     ... y {len(css_links) - 3} m√°s")
    
    # Verificar contenido del body
    body_match = re.search(r'<body[^>]*>(.*?)</body>', content, re.IGNORECASE | re.DOTALL)
    if body_match:
        body_content = body_match.group(1).strip()
        print(f"\nüìÑ Contenido del body:")
        print(f"   - Longitud: {len(body_content)} caracteres")
        
        # Verificar si hay divs principales
        main_divs = re.findall(r'<div[^>]*id=["\']([^"\'>]+)["\'][^>]*>', body_content, re.IGNORECASE)
        print(f"   - Divs con ID: {len(main_divs)}")
        for div_id in main_divs[:5]:
            print(f"     - #{div_id}")
        
        # Mostrar una muestra del contenido del body
        if len(body_content) > 0:
            sample = body_content[:200].replace('\n', ' ').replace('\r', '')
            print(f"   - Muestra: {sample}...")
        else:
            print(f"   - ‚ö†Ô∏è  BODY VAC√çO")
    else:
        print(f"\n‚ùå No se encontr√≥ contenido del body")
    
    # Verificar errores comunes
    print(f"\nüîç Verificaci√≥n de errores:")
    
    # Verificar si hay mensajes de error
    error_patterns = [
        r'error',
        r'failed',
        r'not found',
        r'404',
        r'500',
        r'exception'
    ]
    
    for pattern in error_patterns:
        if re.search(pattern, content, re.IGNORECASE):
            print(f"   - ‚ö†Ô∏è  Posible error encontrado: '{pattern}'")
    
    # Verificar si es una p√°gina de Swagger/ReDoc v√°lida
    swagger_indicators = [
        r'swagger',
        r'openapi',
        r'redoc',
        r'api-docs'
    ]
    
    swagger_found = False
    for indicator in swagger_indicators:
        if re.search(indicator, content, re.IGNORECASE):
            swagger_found = True
            print(f"   - ‚úÖ Indicador de documentaci√≥n encontrado: '{indicator}'")
    
    if not swagger_found:
        print(f"   - ‚ùå No se encontraron indicadores de documentaci√≥n API")
    
    return {
        'length': len(content),
        'has_html': has_html,
        'has_head': has_head,
        'has_body': has_body,
        'scripts_count': len(scripts),
        'css_count': len(css_links),
        'swagger_found': swagger_found
    }

def test_resource_loading(base_url, scripts, css_links):
    """Probar si los recursos externos se cargan correctamente"""
    print(f"\nüîó PROBANDO CARGA DE RECURSOS EXTERNOS")
    print(f"{'='*60}")
    
    failed_resources = []
    
    # Probar scripts
    print(f"\nüìú Probando scripts ({len(scripts)} encontrados):")
    for i, script in enumerate(scripts[:5]):  # Probar solo los primeros 5
        try:
            if script.startswith('http'):
                url = script
            else:
                url = urljoin(base_url, script)
            
            response = requests.get(url, timeout=10)
            if response.status_code == 200:
                print(f"   ‚úÖ {script} - OK ({len(response.content)} bytes)")
            else:
                print(f"   ‚ùå {script} - Error {response.status_code}")
                failed_resources.append(script)
        except Exception as e:
            print(f"   ‚ùå {script} - Error: {str(e)}")
            failed_resources.append(script)
    
    # Probar CSS
    print(f"\nüé® Probando CSS ({len(css_links)} encontrados):")
    for i, css in enumerate(css_links[:3]):  # Probar solo los primeros 3
        try:
            if css.startswith('http'):
                url = css
            else:
                url = urljoin(base_url, css)
            
            response = requests.get(url, timeout=10)
            if response.status_code == 200:
                print(f"   ‚úÖ {css} - OK ({len(response.content)} bytes)")
            else:
                print(f"   ‚ùå {css} - Error {response.status_code}")
                failed_resources.append(css)
        except Exception as e:
            print(f"   ‚ùå {css} - Error: {str(e)}")
            failed_resources.append(css)
    
    return failed_resources

def main():
    """Funci√≥n principal"""
    print("üîç DIAGN√ìSTICO AVANZADO DE P√ÅGINAS EN BLANCO")
    print("="*60)
    
    base_url = "http://localhost:8000"
    
    urls_to_test = [
        f"{base_url}/api/docs",
        f"{base_url}/api/redoc"
    ]
    
    all_results = {}
    
    for url in urls_to_test:
        try:
            print(f"\nüåê Probando: {url}")
            response = requests.get(url, timeout=10)
            
            if response.status_code == 200:
                content = response.text
                results = analyze_html_content(url, content)
                all_results[url] = results
                
                # Extraer recursos para probar
                scripts = re.findall(r'<script[^>]*src=["\']([^"\'>]+)["\'][^>]*>', content, re.IGNORECASE)
                css_links = re.findall(r'<link[^>]*href=["\']([^"\'>]+)["\'][^>]*rel=["\']stylesheet["\'][^>]*>', content, re.IGNORECASE)
                css_links += re.findall(r'<link[^>]*rel=["\']stylesheet["\'][^>]*href=["\']([^"\'>]+)["\'][^>]*>', content, re.IGNORECASE)
                
                if scripts or css_links:
                    failed_resources = test_resource_loading(base_url, scripts, css_links)
                    all_results[url]['failed_resources'] = failed_resources
                
            else:
                print(f"‚ùå Error {response.status_code} al acceder a {url}")
                
        except Exception as e:
            print(f"‚ùå Error al probar {url}: {str(e)}")
    
    # Resumen final
    print(f"\nüìä RESUMEN FINAL DEL DIAGN√ìSTICO")
    print(f"{'='*60}")
    
    for url, results in all_results.items():
        print(f"\nüîó {url}:")
        print(f"   - Longitud: {results['length']} caracteres")
        print(f"   - HTML v√°lido: {'‚úÖ' if results['has_html'] else '‚ùå'}")
        print(f"   - Scripts: {results['scripts_count']}")
        print(f"   - CSS: {results['css_count']}")
        print(f"   - Documentaci√≥n API: {'‚úÖ' if results['swagger_found'] else '‚ùå'}")
        
        if 'failed_resources' in results and results['failed_resources']:
            print(f"   - ‚ö†Ô∏è  Recursos fallidos: {len(results['failed_resources'])}")
            for resource in results['failed_resources'][:3]:
                print(f"     - {resource}")
    
    print(f"\nüí° POSIBLES CAUSAS DE P√ÅGINAS EN BLANCO:")
    print(f"1. Recursos JavaScript/CSS no se cargan (verificar arriba)")
    print(f"2. FastAPI no sirve correctamente los assets est√°ticos")
    print(f"3. Problemas de Content Security Policy (CSP)")
    print(f"4. JavaScript bloqueado por el navegador")
    print(f"5. Extensiones del navegador interfiriendo")
    print(f"6. Cach√© del navegador corrupto")
    
    print(f"\nüõ†Ô∏è  SOLUCIONES RECOMENDADAS:")
    print(f"1. Abrir DevTools (F12) y verificar errores en Console")
    print(f"2. Verificar la pesta√±a Network para recursos fallidos")
    print(f"3. Probar en modo inc√≥gnito")
    print(f"4. Limpiar cach√© del navegador")
    print(f"5. Verificar configuraci√≥n de FastAPI para servir assets")
    print(f"6. Probar con otro navegador")

if __name__ == "__main__":
    main()