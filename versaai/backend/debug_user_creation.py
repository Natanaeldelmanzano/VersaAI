#!/usr/bin/env python3
"""
Script de depuraci√≥n para verificar la creaci√≥n de usuarios
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from src.core.database import get_db
from src.models.user import User
from src.services.auth_service import auth_service
from datetime import datetime
import json

def debug_user_creation():
    """Depurar la creaci√≥n de usuarios"""
    print("üîç Depurando creaci√≥n de usuarios...")
    
    # Obtener sesi√≥n de base de datos
    db = next(get_db())
    
    try:
        # Datos de prueba
        test_email = f"debug_user_{datetime.now().strftime('%Y%m%d_%H%M%S')}@test.com"
        test_username = f"debug_user_{datetime.now().strftime('%Y%m%d_%H%M%S')}"
        test_password = "test123456"
        test_full_name = "Debug User"
        
        print(f"üìß Email: {test_email}")
        print(f"üë§ Username: {test_username}")
        
        # Crear usuario usando el servicio
        print("\n1Ô∏è‚É£ Creando usuario con auth_service...")
        user = auth_service.register_user(
            db=db,
            email=test_email,
            password=test_password,
            username=test_username,
            full_name=test_full_name
        )
        
        if not user:
            print("‚ùå Error: No se pudo crear el usuario")
            return
        
        print(f"‚úÖ Usuario creado con ID: {user.id}")
        
        # Verificar campos de tiempo
        print("\n2Ô∏è‚É£ Verificando campos de tiempo...")
        print(f"created_at: {user.created_at} (tipo: {type(user.created_at)})")
        print(f"updated_at: {user.updated_at} (tipo: {type(user.updated_at)})")
        
        # Refrescar desde la base de datos
        print("\n3Ô∏è‚É£ Refrescando desde la base de datos...")
        db.refresh(user)
        print(f"created_at despu√©s de refresh: {user.created_at} (tipo: {type(user.created_at)})")
        print(f"updated_at despu√©s de refresh: {user.updated_at} (tipo: {type(user.updated_at)})")
        
        # Intentar crear el esquema de respuesta
        print("\n4Ô∏è‚É£ Probando esquema de respuesta...")
        try:
            from src.schemas.user import UserRegistrationResponse
            
            # M√©todo 1: from_orm
            print("Probando from_orm...")
            try:
                response1 = UserRegistrationResponse.from_orm(user)
                print(f"‚úÖ from_orm exitoso: {response1.updated_at}")
            except Exception as e:
                print(f"‚ùå from_orm fall√≥: {e}")
            
            # M√©todo 2: construcci√≥n manual
            print("Probando construcci√≥n manual...")
            try:
                response_data = {
                    "id": user.id,
                    "email": user.email,
                    "username": user.username,
                    "full_name": user.full_name,
                    "is_active": user.is_active,
                    "role": user.role,
                    "organization_id": user.organization_id,
                    "is_verified": user.is_verified,
                    "created_at": user.created_at,
                    "updated_at": user.updated_at or user.created_at
                }
                response2 = UserRegistrationResponse(**response_data)
                print(f"‚úÖ Construcci√≥n manual exitosa: {response2.updated_at}")
            except Exception as e:
                print(f"‚ùå Construcci√≥n manual fall√≥: {e}")
                
        except Exception as e:
            print(f"‚ùå Error importando esquema: {e}")
        
        # Limpiar - eliminar usuario de prueba
        print("\n5Ô∏è‚É£ Limpiando usuario de prueba...")
        db.delete(user)
        db.commit()
        print("‚úÖ Usuario de prueba eliminado")
        
    except Exception as e:
        print(f"‚ùå Error general: {e}")
        db.rollback()
    finally:
        db.close()

if __name__ == "__main__":
    debug_user_creation()