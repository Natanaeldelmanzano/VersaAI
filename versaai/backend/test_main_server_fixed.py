#!/usr/bin/env python3
"""
Script para probar el servidor principal corregido de VersaAI
Verifica que las p√°ginas de documentaci√≥n funcionen correctamente
"""

import requests
import time
from urllib.parse import urljoin

def test_endpoint(base_url, endpoint, description):
    """Prueba un endpoint espec√≠fico"""
    url = urljoin(base_url, endpoint)
    print(f"\nüîç Probando {description}")
    print(f"URL: {url}")
    
    try:
        response = requests.get(url, timeout=10)
        print(f"‚úÖ Status: {response.status_code}")
        print(f"üìè Content Length: {len(response.content)} bytes")
        
        # Verificar headers importantes
        content_type = response.headers.get('content-type', 'N/A')
        print(f"üìÑ Content-Type: {content_type}")
        
        # Verificar headers de seguridad y rendimiento
        important_headers = [
            'X-Content-Type-Options',
            'X-Frame-Options', 
            'X-XSS-Protection',
            'X-Process-Time',
            'X-Request-ID',
            'Content-Security-Policy'
        ]
        
        present_headers = []
        for header in important_headers:
            if header in response.headers:
                value = response.headers[header]
                present_headers.append(f"{header}: {value}")
        
        if present_headers:
            print(f"üîí Headers importantes:")
            for header in present_headers:
                print(f"   ‚Ä¢ {header}")
        
        # Para endpoints de documentaci√≥n, verificar contenido espec√≠fico
        if '/docs' in endpoint or '/redoc' in endpoint:
            content = response.text
            
            # Verificar elementos de documentaci√≥n
            doc_indicators = ['swagger', 'redoc', 'openapi', 'api documentation']
            found_indicators = []
            for indicator in doc_indicators:
                if indicator in content.lower():
                    found_indicators.append(indicator)
            
            if found_indicators:
                print(f"‚úÖ Elementos de documentaci√≥n encontrados: {', '.join(found_indicators)}")
            else:
                print("‚ö†Ô∏è  No se detectaron elementos de documentaci√≥n")
                
            # Verificar recursos JavaScript/CSS
            js_css_count = content.count('<script') + content.count('<link')
            if js_css_count > 0:
                print(f"‚úÖ Recursos JavaScript/CSS encontrados: {js_css_count}")
            else:
                print("‚ö†Ô∏è  No se detectaron recursos JavaScript/CSS")
                
            # Verificar CSP
            csp_header = response.headers.get('Content-Security-Policy', '')
            if csp_header:
                if 'unsafe-inline' in csp_header or 'unsafe-eval' in csp_header:
                    print(f"‚úÖ CSP permisivo detectado")
                else:
                    print(f"‚ö†Ô∏è  CSP restrictivo: {csp_header}")
            else:
                print("‚úÖ Sin CSP restrictivo")
                
            # Verificar que la p√°gina no est√© en blanco
            if len(content.strip()) > 100:
                print("‚úÖ P√°gina con contenido suficiente")
            else:
                print("‚ùå P√°gina posiblemente en blanco")
        
        # Para JSON endpoints
        elif 'application/json' in content_type:
            try:
                json_data = response.json()
                print(f"‚úÖ JSON v√°lido con {len(json_data)} campos")
                if isinstance(json_data, dict):
                    for key, value in list(json_data.items())[:3]:  # Mostrar primeros 3 campos
                        print(f"   ‚Ä¢ {key}: {value}")
            except:
                print("‚ö†Ô∏è  Respuesta no es JSON v√°lido")
        
        return True
        
    except requests.exceptions.ConnectionError as e:
        print(f"‚ùå Error de conexi√≥n: {e}")
        return False
    except requests.exceptions.Timeout as e:
        print(f"‚ùå Timeout: {e}")
        return False
    except Exception as e:
        print(f"‚ùå Error inesperado: {e}")
        return False

def main():
    """Funci√≥n principal de testing"""
    print("üöÄ Probando servidor principal VersaAI CORREGIDO")
    print("=" * 70)
    print("üîß Cambios aplicados:")
    print("   ‚Ä¢ SecurityHeadersMiddleware removido")
    print("   ‚Ä¢ CORS m√°s permisivo para desarrollo")
    print("   ‚Ä¢ TrustedHost m√°s permisivo")
    print("   ‚Ä¢ Sin CSP restrictivo en documentaci√≥n")
    print("=" * 70)
    
    base_url = "http://localhost:8000"
    
    # Lista de endpoints a probar
    endpoints = [
        ("/", "Endpoint ra√≠z"),
        ("/health", "Health check"),
        ("/api/docs", "Swagger UI - CR√çTICO"),
        ("/api/redoc", "ReDoc - CR√çTICO"),
        ("/api/openapi.json", "OpenAPI JSON")
    ]
    
    results = []
    critical_endpoints = ["/api/docs", "/api/redoc"]
    
    for endpoint, description in endpoints:
        success = test_endpoint(base_url, endpoint, description)
        results.append((endpoint, success, endpoint in critical_endpoints))
        time.sleep(0.5)  # Peque√±a pausa entre requests
    
    # Resumen de resultados
    print("\n" + "=" * 70)
    print("üìä RESUMEN DE RESULTADOS")
    print("=" * 70)
    
    successful = 0
    critical_successful = 0
    critical_total = 0
    
    for endpoint, success, is_critical in results:
        status = "‚úÖ OK" if success else "‚ùå FAIL"
        critical_mark = "üî• CR√çTICO" if is_critical else ""
        print(f"{endpoint:<25} {status} {critical_mark}")
        
        if success:
            successful += 1
        if is_critical:
            critical_total += 1
            if success:
                critical_successful += 1
    
    print(f"\nüéØ √âxito general: {successful}/{len(results)} endpoints")
    print(f"üî• Endpoints cr√≠ticos: {critical_successful}/{critical_total} funcionando")
    
    if critical_successful == critical_total:
        print("\nüéâ ¬°PROBLEMA RESUELTO! Las p√°ginas de documentaci√≥n funcionan correctamente")
        print("\nüåê URLs de documentaci√≥n disponibles:")
        print(f"   ‚Ä¢ Swagger UI: {base_url}/api/docs")
        print(f"   ‚Ä¢ ReDoc: {base_url}/api/redoc")
        print(f"   ‚Ä¢ Health Check: {base_url}/health")
        
        print("\n‚úÖ Soluci√≥n aplicada exitosamente:")
        print("   ‚Ä¢ SecurityHeadersMiddleware removido del pipeline")
        print("   ‚Ä¢ CSP restrictivo eliminado")
        print("   ‚Ä¢ Middlewares de performance mantenidos")
        print("   ‚Ä¢ Rate limiting funcional")
        print("   ‚Ä¢ Headers de seguridad b√°sicos preservados")
        
    elif critical_successful > 0:
        print(f"\n‚ö†Ô∏è  Progreso parcial: {critical_successful}/{critical_total} p√°ginas cr√≠ticas funcionan")
        print("\nüîß Revisar configuraci√≥n adicional si es necesario")
        
    else:
        print("\n‚ùå Las p√°ginas de documentaci√≥n siguen fallando")
        print("\nüîß Acciones recomendadas:")
        print("   ‚Ä¢ Verificar que los cambios se aplicaron correctamente")
        print("   ‚Ä¢ Revisar logs del servidor para errores")
        print("   ‚Ä¢ Considerar middlewares adicionales que puedan interferir")

if __name__ == "__main__":
    main()