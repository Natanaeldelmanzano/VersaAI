# verify_organization_fix.py
# Script para verificar que la correcci√≥n del organization_id funcion√≥

import sys
import os
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

import requests
import json
from sqlalchemy import create_engine, text
from sqlalchemy.orm import sessionmaker
from src.core.database import engine, SessionLocal
from src.core.config import settings

def verify_database():
    """Verificar estado de la base de datos"""
    try:
        # Usar la configuraci√≥n existente de la base de datos
        db = SessionLocal()
        
        print(f"üîó Conectando a la base de datos: {settings.DATABASE_URL[:20]}...")
        
        print("üîç VERIFICANDO BASE DE DATOS...")
        print("=" * 50)
        
        # Verificar columna organization_id en users
        result = db.execute(text("""
            SELECT COUNT(*) FROM information_schema.columns
            WHERE table_name='users' AND column_name='organization_id';
        """))
        
        if result.scalar() > 0:
            print("‚úÖ Columna organization_id existe en users")
        else:
            print("‚ùå Columna organization_id NO existe en users")
            return False
        
        # Verificar usuarios sin organization_id
        result = db.execute(text("""
            SELECT COUNT(*) FROM users WHERE organization_id IS NULL;
        """))
        null_count = result.scalar()
        
        if null_count == 0:
            print("‚úÖ Todos los usuarios tienen organization_id")
        else:
            print(f"‚ö†Ô∏è  {null_count} usuarios sin organization_id")
        
        # Verificar organizaciones
        result = db.execute(text("""
            SELECT COUNT(*) FROM organizations;
        """))
        org_count = result.scalar()
        print(f"üìä Total organizaciones: {org_count}")
        
        # Verificar relaci√≥n usuarios-organizaciones
        result = db.execute(text("""
            SELECT u.id, u.email, u.organization_id, o.name as org_name
            FROM users u
            LEFT JOIN organizations o ON u.organization_id = o.id
            LIMIT 5;
        """))
        
        print("\nüë• Muestra de usuarios y sus organizaciones:")
        for row in result.fetchall():
            user_id, email, org_id, org_name = row
            print(f"   Usuario {user_id} ({email}) -> Org {org_id} ({org_name})")
        
        db.close()
        return True
        
    except Exception as e:
        print(f"‚ùå Error verificando DB: {e}")
        return False

def verify_api():
    """Verificar que la API est√° funcionando"""
    try:
        print("\nüîç VERIFICANDO API...")
        print("=" * 50)
        
        # Verificar health endpoint
        response = requests.get("http://localhost:8000/")
        if response.status_code == 200:
            print("‚úÖ API est√° funcionando")
        else:
            print(f"‚ö†Ô∏è API responde pero con c√≥digo: {response.status_code}")
        
        # Verificar documentaci√≥n
        response = requests.get("http://localhost:8000/api/docs")
        if response.status_code == 200:
            print("‚úÖ Documentaci√≥n API accesible")
        else:
            print("‚ö†Ô∏è Documentaci√≥n API no accesible")
        
        return True
        
    except Exception as e:
        print(f"‚ùå API no est√° accesible: {e}")
        return False

def test_chatbot_creation():
    """Probar la creaci√≥n de un chatbot"""
    try:
        print("\nü§ñ PROBANDO CREACI√ìN DE CHATBOT...")
        print("=" * 50)
        
        base_url = "http://localhost:8000/api/v1"
        
        # 1. Login para obtener token
        login_data = {
            "email": "integration_test@versaai.com",
            "password": "testpassword123"
        }
        
        login_response = requests.post(
            f"{base_url}/auth/login/json",
            json=login_data,
            headers={"Content-Type": "application/json"}
        )
        
        if login_response.status_code != 200:
            print(f"‚ùå Login failed: {login_response.status_code}")
            print(f"Response: {login_response.text}")
            return False
        
        token = login_response.json()["access_token"]
        headers = {"Authorization": f"Bearer {token}"}
        
        print("‚úÖ Login exitoso")
        
        # 2. Obtener informaci√≥n del usuario
        user_response = requests.get(f"{base_url}/auth/me", headers=headers)
        if user_response.status_code == 200:
            user_data = user_response.json()
            print(f"‚úÖ Usuario: {user_data.get('email')}")
            print(f"üìã Organization ID: {user_data.get('organization_id', 'NO ENCONTRADO')}")
        
        # 3. Intentar crear un chatbot de prueba con nombre √∫nico
        from datetime import datetime
        timestamp = int(datetime.now().timestamp())
        chatbot_data = {
            "name": f"Test Chatbot Verificaci√≥n {timestamp}",
            "description": "Chatbot de prueba para verificar la correcci√≥n",
            "system_prompt": "Eres un asistente √∫til",
            "model": "llama3-8b-8192",
            "temperature": 0.7,
            "max_tokens": 1000,
            "is_active": True
        }
        
        chatbot_response = requests.post(
            f"{base_url}/chatbots/",
            json=chatbot_data,
            headers=headers
        )
        
        if chatbot_response.status_code == 201:
            chatbot = chatbot_response.json()
            print(f"‚úÖ Chatbot creado exitosamente: {chatbot.get('name')}")
            print(f"üìã ID: {chatbot.get('id')}")
            print(f"üè¢ Organization ID: {chatbot.get('organization_id')}")
            return True
        else:
            print(f"‚ùå Error creando chatbot: {chatbot_response.status_code}")
            print(f"Response: {chatbot_response.text}")
            return False
        
    except Exception as e:
        print(f"‚ùå Error en test de chatbot: {e}")
        return False

def main():
    """Funci√≥n principal de verificaci√≥n"""
    print("üîß VERIFICACI√ìN COMPLETA DE LA CORRECCI√ìN")
    print("=" * 60)
    
    # Verificar base de datos
    db_ok = verify_database()
    
    # Verificar API
    api_ok = verify_api()
    
    # Probar creaci√≥n de chatbot
    chatbot_ok = test_chatbot_creation()
    
    # Resumen final
    print("\nüìä RESUMEN DE VERIFICACI√ìN")
    print("=" * 60)
    print(f"Base de datos: {'‚úÖ OK' if db_ok else '‚ùå ERROR'}")
    print(f"API: {'‚úÖ OK' if api_ok else '‚ùå ERROR'}")
    print(f"Creaci√≥n de chatbot: {'‚úÖ OK' if chatbot_ok else '‚ùå ERROR'}")
    
    if db_ok and api_ok and chatbot_ok:
        print("\nüéâ ¬°CORRECCI√ìN EXITOSA! El problema de organization_id est√° resuelto.")
    else:
        print("\n‚ö†Ô∏è Algunos problemas persisten. Revisar los errores arriba.")
    
    return db_ok and api_ok and chatbot_ok

if __name__ == "__main__":
    main()