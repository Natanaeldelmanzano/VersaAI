#!/usr/bin/env python3
"""
Script para diagnosticar el contenido de las p√°ginas de documentaci√≥n del backend
Verifica si las p√°ginas de Swagger UI, ReDoc y OpenAPI JSON tienen contenido v√°lido
"""

import requests
import json
import re

def check_url_content(url, description):
    """Verifica el contenido de una URL espec√≠fica"""
    print(f"\n{'='*60}")
    print(f"Verificando: {description}")
    print(f"URL: {url}")
    print(f"{'='*60}")
    
    try:
        response = requests.get(url, timeout=10)
        print(f"Status Code: {response.status_code}")
        print(f"Content-Type: {response.headers.get('content-type', 'No especificado')}")
        print(f"Content-Length: {len(response.content)} bytes")
        
        if response.status_code == 200:
            content = response.text
            print(f"Longitud del contenido: {len(content)} caracteres")
            
            # Verificar si es HTML
            if 'text/html' in response.headers.get('content-type', ''):
                # Buscar t√≠tulo usando regex
                title_match = re.search(r'<title[^>]*>([^<]+)</title>', content, re.IGNORECASE)
                title = title_match.group(1) if title_match else 'Sin t√≠tulo'
                print(f"T√≠tulo de la p√°gina: {title}")
                
                # Verificar elementos espec√≠ficos de Swagger/ReDoc
                swagger_matches = re.findall(r'(swagger|redoc)', content, re.IGNORECASE)
                print(f"Referencias a Swagger/ReDoc: {len(swagger_matches)}")
                
                # Verificar scripts
                script_matches = re.findall(r'<script[^>]*>', content, re.IGNORECASE)
                print(f"Tags <script> encontrados: {len(script_matches)}")
                
                # Verificar CSS
                css_matches = re.findall(r'<link[^>]*rel=["\']stylesheet["\'][^>]*>', content, re.IGNORECASE)
                print(f"Enlaces CSS encontrados: {len(css_matches)}")
                
                # Buscar el contenido del body
                body_match = re.search(r'<body[^>]*>(.*?)</body>', content, re.DOTALL | re.IGNORECASE)
                if body_match:
                    body_content = body_match.group(1)
                    # Remover tags HTML para obtener solo texto
                    body_text = re.sub(r'<[^>]+>', '', body_content).strip()
                    print(f"\nPrimeros 300 caracteres del body (sin HTML):")
                    print(f"'{body_text[:300]}{'...' if len(body_text) > 300 else ''}")
                    
                    # Verificar si el body est√° pr√°cticamente vac√≠o
                    if len(body_text.strip()) < 10:
                        print("‚ö†Ô∏è  PROBLEMA: El body est√° pr√°cticamente vac√≠o")
                else:
                    print("\nNo se encontr√≥ elemento <body> o est√° malformado")
                
                # Verificar si hay divs con IDs espec√≠ficos de Swagger/ReDoc
                swagger_div = re.search(r'<div[^>]*id=["\']swagger-ui["\'][^>]*>', content, re.IGNORECASE)
                redoc_div = re.search(r'<div[^>]*id=["\']redoc["\'][^>]*>', content, re.IGNORECASE)
                
                if swagger_div:
                    print("‚úÖ Encontrado div#swagger-ui")
                if redoc_div:
                    print("‚úÖ Encontrado div#redoc")
                    
                if not swagger_div and not redoc_div and 'swagger' in url:
                    print("‚ö†Ô∏è  PROBLEMA: No se encontraron divs espec√≠ficos de Swagger UI")
                if not redoc_div and 'redoc' in url:
                    print("‚ö†Ô∏è  PROBLEMA: No se encontraron divs espec√≠ficos de ReDoc")
                    
            # Verificar si es JSON
            elif 'application/json' in response.headers.get('content-type', ''):
                try:
                    json_data = json.loads(content)
                    print(f"JSON v√°lido con {len(json_data)} elementos principales")
                    if 'openapi' in json_data:
                        print(f"Versi√≥n OpenAPI: {json_data.get('openapi')}")
                    if 'info' in json_data:
                        info = json_data.get('info', {})
                        print(f"T√≠tulo API: {info.get('title')}")
                        print(f"Versi√≥n API: {info.get('version')}")
                    if 'paths' in json_data:
                        print(f"N√∫mero de endpoints: {len(json_data.get('paths', {}))}")
                except json.JSONDecodeError as e:
                    print(f"‚ùå Error al parsear JSON: {e}")
                    print(f"Primeros 500 caracteres: {content[:500]}")
            
            # Para cualquier tipo de contenido, verificar si est√° vac√≠o o solo espacios
            if not content.strip():
                print("‚ùå PROBLEMA CR√çTICO: El contenido est√° completamente vac√≠o")
            elif len(content.strip()) < 100:
                print(f"‚ö†Ô∏è  PROBLEMA: Contenido muy corto: '{content.strip()}'")
            else:
                print("‚úÖ Contenido tiene longitud adecuada")
                
            # Mostrar una muestra del contenido HTML
            if 'text/html' in response.headers.get('content-type', ''):
                print(f"\nPrimeros 200 caracteres del HTML:")
                print(f"'{content[:200]}{'...' if len(content) > 200 else ''}")
                
        else:
            print(f"‚ùå Error HTTP: {response.status_code}")
            print(f"Respuesta: {response.text[:200]}")
            
    except requests.exceptions.ConnectionError:
        print("‚ùå Error de conexi√≥n - El servidor no est√° disponible")
    except requests.exceptions.Timeout:
        print("‚ùå Timeout - El servidor no responde")
    except Exception as e:
        print(f"‚ùå Error inesperado: {e}")

def main():
    """Funci√≥n principal"""
    print("üîç DIAGN√ìSTICO DE CONTENIDO DE DOCUMENTACI√ìN DEL BACKEND")
    print("Verificando el contenido real de las p√°ginas de documentaci√≥n...")
    
    # URLs a verificar
    urls_to_check = [
        ("http://localhost:8000/api/docs", "Swagger UI"),
        ("http://localhost:8000/api/redoc", "ReDoc"),
        ("http://localhost:8000/openapi.json", "OpenAPI JSON Schema"),
        ("http://localhost:8000/", "Root Endpoint"),
        ("http://localhost:8000/api/health/", "Health Check")
    ]
    
    for url, description in urls_to_check:
        check_url_content(url, description)
    
    print(f"\n{'='*60}")
    print("RESUMEN DEL DIAGN√ìSTICO")
    print(f"{'='*60}")
    print("Si las p√°ginas muestran contenido v√°lido pero se ven en blanco en el navegador,")
    print("el problema podr√≠a ser:")
    print("1. JavaScript bloqueado o con errores")
    print("2. CSS no cargando correctamente")
    print("3. Problemas de CORS")
    print("4. Extensiones del navegador interfiriendo")
    print("5. Cach√© del navegador corrupto")
    print("6. FastAPI no sirviendo correctamente los assets est√°ticos")
    print("\nSoluciones sugeridas:")
    print("- Abrir herramientas de desarrollador (F12) y verificar errores en Console")
    print("- Verificar la pesta√±a Network para ver qu√© recursos fallan al cargar")
    print("- Limpiar cach√© del navegador (Ctrl+Shift+Delete)")
    print("- Probar en modo inc√≥gnito")
    print("- Probar en otro navegador")
    print("- Verificar configuraci√≥n de CORS en el backend")
    print("- Reiniciar el servidor backend")

if __name__ == "__main__":
    main()