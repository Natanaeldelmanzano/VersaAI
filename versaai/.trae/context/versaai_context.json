{
  "versaai_context": {
    "project_overview": {
      "name": "VersaAI",
      "description": "Plataforma avanzada de chatbots con IA que permite a usuarios interactuar con documentos y obtener respuestas inteligentes",
      "version": "1.0.0",
      "architecture": "Microservicios con FastAPI + Vue.js 3",
      "primary_language": "Spanish",
      "development_stage": "MVP Development",
      "target_users": ["Empresas", "Profesionales", "Estudiantes", "Investigadores"]
    },
    
    "technical_stack": {
      "backend": {
        "framework": "FastAPI 0.104+",
        "database": "PostgreSQL 15+",
        "cache": "Redis 7+",
        "orm": "SQLAlchemy 2.0+",
        "validation": "Pydantic 2.0+",
        "authentication": "JWT with bcrypt",
        "ai_integration": "Groq AI (Llama, Mixtral, Gemma)",
        "file_processing": "PyPDF2, python-docx, pandas",
        "vector_search": "sentence-transformers",
        "async_support": "asyncio, asyncpg"
      },
      "frontend": {
        "framework": "Vue.js 3.3+",
        "state_management": "Pinia",
        "routing": "Vue Router 4",
        "styling": "Tailwind CSS 3+",
        "build_tool": "Vite 4+",
        "type_checking": "TypeScript 5+",
        "ui_components": "Custom + Headless UI",
        "icons": "Heroicons",
        "http_client": "Axios",
        "real_time": "WebSockets"
      },
      "infrastructure": {
        "containerization": "Docker + Docker Compose",
        "reverse_proxy": "Nginx",
        "environment_management": ".env files",
        "process_management": "Uvicorn",
        "monitoring": "Custom health checks",
        "file_storage": "Local filesystem with organized structure"
      }
    },
    
    "project_structure": {
      "backend": {
        "root": "backend/",
        "main_app": "src/main.py",
        "core_modules": {
          "database": "src/core/database.py",
          "config": "src/core/config.py",
          "security": "src/core/security.py",
          "middleware": "src/core/middleware.py"
        },
        "models": {
          "location": "src/models/",
          "key_models": ["user.py", "conversation.py", "message.py", "file.py", "organization.py"]
        },
        "services": {
          "location": "src/services/",
          "key_services": ["auth_service.py", "chat_service.py", "file_service.py", "groq_service.py"]
        },
        "api": {
          "location": "src/api/",
          "routers": ["auth.py", "chat.py", "files.py", "users.py", "admin.py"]
        },
        "schemas": {
          "location": "src/schemas/",
          "purpose": "Pydantic models for request/response validation"
        }
      },
      "frontend": {
        "root": "frontend/",
        "main_app": "src/main.ts",
        "components": {
          "location": "src/components/",
          "structure": ["common/", "chat/", "auth/", "files/", "admin/"]
        },
        "stores": {
          "location": "src/stores/",
          "key_stores": ["auth.ts", "chat.ts", "files.ts", "ui.ts"]
        },
        "views": {
          "location": "src/views/",
          "main_views": ["Home.vue", "Chat.vue", "Login.vue", "Dashboard.vue"]
        },
        "composables": {
          "location": "src/composables/",
          "purpose": "Reusable composition functions"
        }
      }
    },
    
    "business_logic": {
      "core_features": {
        "user_management": {
          "description": "Registro, autenticación y gestión de perfiles de usuario",
          "key_components": ["JWT authentication", "Role-based access", "User preferences"],
          "security_level": "High"
        },
        "chat_system": {
          "description": "Sistema de chat inteligente con IA para respuestas contextuales",
          "key_components": ["Groq AI integration", "Conversation history", "Real-time responses"],
          "ai_models": ["llama-3.1-70b-versatile", "mixtral-8x7b-32768", "gemma-7b-it"]
        },
        "file_management": {
          "description": "Subida, procesamiento y gestión de documentos para contexto de IA",
          "supported_formats": ["PDF", "DOCX", "TXT", "CSV", "XLSX"],
          "processing_features": ["Text extraction", "Vector embeddings", "Semantic search"]
        },
        "organization_management": {
          "description": "Gestión de organizaciones y equipos con roles y permisos",
          "key_components": ["Multi-tenant architecture", "Role hierarchy", "Resource sharing"]
        }
      },
      "data_flow": {
        "user_registration": "Frontend → Auth API → User Service → Database",
        "chat_interaction": "Frontend → Chat API → Groq Service → Conversation Service → Database",
        "file_upload": "Frontend → File API → File Service → Document Processor → Vector Service",
        "authentication": "Frontend → Auth API → JWT Service → User Validation"
      },
      "security_considerations": {
        "authentication": "JWT tokens with refresh mechanism",
        "authorization": "Role-based access control (RBAC)",
        "data_protection": "Password hashing with bcrypt",
        "api_security": "Rate limiting, CORS, input validation",
        "file_security": "File type validation, size limits, virus scanning"
      }
    },
    
    "development_patterns": {
      "backend_patterns": {
        "dependency_injection": "FastAPI Depends() for services and database sessions",
        "async_programming": "Async/await for all I/O operations",
        "error_handling": "Structured exception handling with custom HTTP exceptions",
        "validation": "Pydantic models for all request/response data",
        "logging": "Structured logging with correlation IDs",
        "testing": "Pytest with async test support and database fixtures"
      },
      "frontend_patterns": {
        "composition_api": "Vue 3 Composition API for all components",
        "state_management": "Pinia stores with TypeScript support",
        "component_structure": "Single File Components with <script setup>",
        "styling": "Tailwind CSS with component-scoped styles",
        "type_safety": "TypeScript for all code with strict mode",
        "testing": "Vitest for unit tests, Cypress for E2E"
      },
      "code_organization": {
        "naming_conventions": {
          "files": "snake_case for Python, kebab-case for Vue",
          "functions": "snake_case for Python, camelCase for TypeScript",
          "classes": "PascalCase for both Python and TypeScript",
          "constants": "UPPER_SNAKE_CASE for both languages"
        },
        "import_organization": {
          "python": "Standard library → Third party → Local imports",
          "typescript": "Vue/framework → Third party → Local imports"
        }
      }
    },
    
    "ai_integration_context": {
      "groq_configuration": {
        "api_endpoint": "https://api.groq.com/openai/v1/chat/completions",
        "authentication": "Bearer token from environment",
        "rate_limits": "Respect Groq API rate limits",
        "error_handling": "Graceful degradation on API failures"
      },
      "model_selection_strategy": {
        "llama-3.1-70b-versatile": "General purpose, high quality responses",
        "mixtral-8x7b-32768": "Long context, document analysis",
        "gemma-7b-it": "Fast responses, simple queries"
      },
      "prompt_engineering": {
        "system_prompts": "Consistent system prompts for VersaAI context",
        "user_context": "Include user preferences and conversation history",
        "document_context": "Inject relevant document excerpts for RAG",
        "safety_guidelines": "Content moderation and appropriate responses"
      },
      "vector_search": {
        "embedding_model": "sentence-transformers/all-MiniLM-L6-v2",
        "chunking_strategy": "Semantic chunking with overlap",
        "similarity_threshold": "0.7 for relevant document retrieval",
        "max_context_length": "4000 tokens for model input"
      }
    },
    
    "database_schema_context": {
      "core_entities": {
        "users": {
          "purpose": "User accounts and authentication",
          "key_fields": ["email", "username", "password_hash", "role", "is_active"],
          "relationships": ["organizations", "conversations", "files"]
        },
        "organizations": {
          "purpose": "Multi-tenant organization management",
          "key_fields": ["name", "domain", "settings", "subscription_tier"],
          "relationships": ["users", "chatbots"]
        },
        "conversations": {
          "purpose": "Chat conversation tracking",
          "key_fields": ["title", "user_id", "chatbot_id", "metadata"],
          "relationships": ["messages", "users", "chatbots"]
        },
        "messages": {
          "purpose": "Individual chat messages",
          "key_fields": ["content", "role", "conversation_id", "metadata"],
          "relationships": ["conversations"]
        },
        "files": {
          "purpose": "Uploaded document management",
          "key_fields": ["filename", "file_path", "file_type", "processed_content"],
          "relationships": ["users", "file_embeddings"]
        }
      },
      "indexing_strategy": {
        "performance_indexes": ["user_email", "conversation_user_id", "message_conversation_id"],
        "search_indexes": ["file_content_fts", "message_content_fts"],
        "composite_indexes": ["user_organization", "conversation_created_at"]
      }
    },
    
    "environment_context": {
      "development": {
        "database": "SQLite for quick setup, PostgreSQL for full testing",
        "debug_mode": "Enabled with detailed error messages",
        "hot_reload": "Both backend and frontend auto-reload",
        "cors_policy": "Permissive for local development"
      },
      "production": {
        "database": "PostgreSQL with connection pooling",
        "security": "Strict CORS, rate limiting, input validation",
        "performance": "Redis caching, optimized queries",
        "monitoring": "Health checks, error tracking, metrics"
      }
    },
    
    "user_experience_context": {
      "design_principles": {
        "simplicity": "Clean, intuitive interface for all user types",
        "responsiveness": "Mobile-first design with desktop optimization",
        "accessibility": "WCAG 2.1 AA compliance",
        "performance": "Fast loading times and smooth interactions"
      },
      "user_workflows": {
        "new_user_onboarding": "Registration → Email verification → Profile setup → First chat",
        "document_interaction": "Upload → Processing → Chat with document context",
        "team_collaboration": "Organization setup → User invitation → Shared conversations",
        "admin_management": "User management → Analytics → System configuration"
      },
      "error_handling_ux": {
        "validation_errors": "Inline validation with helpful messages",
        "api_errors": "User-friendly error messages with retry options",
        "loading_states": "Clear loading indicators and progress feedback",
        "offline_handling": "Graceful degradation when connectivity is lost"
      }
    },
    
    "quality_assurance": {
      "testing_strategy": {
        "unit_tests": "Individual function and component testing",
        "integration_tests": "API endpoint and service integration testing",
        "e2e_tests": "Complete user workflow testing",
        "performance_tests": "Load testing for API endpoints"
      },
      "code_quality_metrics": {
        "test_coverage": "Minimum 80% for backend, 70% for frontend",
        "type_coverage": "100% TypeScript coverage for frontend",
        "complexity_limits": "Maximum cyclomatic complexity of 10",
        "documentation": "All public APIs and components documented"
      },
      "security_testing": {
        "authentication_tests": "JWT token validation and expiration",
        "authorization_tests": "Role-based access control verification",
        "input_validation": "SQL injection and XSS prevention",
        "file_upload_security": "Malicious file detection and prevention"
      }
    }
  }
}