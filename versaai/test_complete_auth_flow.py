#!/usr/bin/env python3
"""
Script para probar el flujo completo de autenticaci√≥n autom√°tica
"""

import requests
import json
import time
import webbrowser
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.chrome.options import Options

def test_auth_flow():
    print("üß™ Probando flujo completo de autenticaci√≥n autom√°tica")
    print("=" * 60)
    
    # 1. Verificar que el backend est√© funcionando
    try:
        response = requests.get('http://localhost:8000/api/v1/health', timeout=5)
        print(f"‚úÖ Backend activo: {response.status_code}")
    except Exception as e:
        print(f"‚ùå Backend no disponible: {e}")
        return False
    
    # 2. Verificar que el frontend est√© funcionando
    try:
        response = requests.get('http://localhost:3000', timeout=5)
        print(f"‚úÖ Frontend activo: {response.status_code}")
    except Exception as e:
        print(f"‚ùå Frontend no disponible: {e}")
        return False
    
    # 3. Verificar que setup-auth.html est√© disponible
    try:
        response = requests.get('http://localhost:3000/setup-auth.html', timeout=5)
        print(f"‚úÖ setup-auth.html disponible: {response.status_code}")
    except Exception as e:
        print(f"‚ùå setup-auth.html no disponible: {e}")
        return False
    
    # 4. Probar login directo
    try:
        login_data = {
            "email": "demo@versaai.com",
            "password": "demo123456"
        }
        response = requests.post(
            'http://localhost:8000/api/v1/auth/login',
            json=login_data,
            timeout=10
        )
        
        if response.status_code == 200:
            data = response.json()
            print(f"‚úÖ Login directo exitoso: {data.get('user', {}).get('email')}")
            print(f"   Token recibido: {data.get('access_token', 'N/A')[:20]}...")
        else:
            print(f"‚ùå Login directo fall√≥: {response.status_code} - {response.text}")
            return False
    except Exception as e:
        print(f"‚ùå Error en login directo: {e}")
        return False
    
    # 5. Probar con navegador automatizado
    print("\nüåê Probando con navegador automatizado...")
    
    try:
        # Configurar Chrome en modo headless
        chrome_options = Options()
        chrome_options.add_argument('--headless')
        chrome_options.add_argument('--no-sandbox')
        chrome_options.add_argument('--disable-dev-shm-usage')
        
        driver = webdriver.Chrome(options=chrome_options)
        
        try:
            # Ir a setup-auth.html
            driver.get('http://localhost:3000/setup-auth.html')
            print("üìÑ P√°gina setup-auth.html cargada")
            
            # Esperar y hacer clic en el bot√≥n
            wait = WebDriverWait(driver, 10)
            button = wait.until(EC.element_to_be_clickable((By.ID, 'setupBtn')))
            button.click()
            print("üñ±Ô∏è Bot√≥n 'Configurar Autenticaci√≥n Autom√°tica' clickeado")
            
            # Esperar a que aparezca el mensaje de √©xito
            success_message = wait.until(EC.presence_of_element_located((By.ID, 'message')))
            print(f"‚úÖ Mensaje mostrado: {success_message.text}")
            
            # Verificar que el token est√© en localStorage
            token = driver.execute_script("return localStorage.getItem('access_token');")
            if token:
                print(f"‚úÖ Token guardado en localStorage: {token[:20]}...")
            else:
                print("‚ùå No se encontr√≥ token en localStorage")
                return False
            
            # Esperar redirecci√≥n
            time.sleep(3)
            current_url = driver.current_url
            print(f"üîÑ URL actual despu√©s de redirecci√≥n: {current_url}")
            
            # Verificar si estamos en la p√°gina principal
            if 'localhost:3000' in current_url and 'setup-auth.html' not in current_url:
                print("‚úÖ Redirecci√≥n a p√°gina principal exitosa")
                
                # Verificar si el usuario est√° autenticado en la nueva p√°gina
                time.sleep(2)  # Dar tiempo para que cargue la aplicaci√≥n
                
                # Buscar indicadores de autenticaci√≥n
                try:
                    # Buscar elementos que indiquen que el usuario est√° logueado
                    user_elements = driver.find_elements(By.CSS_SELECTOR, '[data-testid="user-menu"], .user-menu, .logout-btn, .user-profile')
                    if user_elements:
                        print("‚úÖ Usuario parece estar autenticado (elementos de usuario encontrados)")
                    else:
                        print("‚ö†Ô∏è No se encontraron elementos de usuario autenticado")
                        
                        # Verificar si hay formulario de login visible
                        login_forms = driver.find_elements(By.CSS_SELECTOR, 'form[data-testid="login-form"], .login-form, input[type="email"]')
                        if login_forms:
                            print("‚ùå Formulario de login visible - usuario NO autenticado")
                            return False
                        else:
                            print("‚úÖ No hay formulario de login visible - posiblemente autenticado")
                            
                except Exception as e:
                    print(f"‚ö†Ô∏è Error verificando estado de autenticaci√≥n: {e}")
                    
            else:
                print(f"‚ùå No se redirigi√≥ correctamente. URL: {current_url}")
                return False
                
        finally:
            driver.quit()
            
    except Exception as e:
        print(f"‚ùå Error en prueba con navegador: {e}")
        print("üí° Nota: Aseg√∫rate de tener ChromeDriver instalado")
        
        # Fallback: abrir manualmente
        print("\nüîÑ Abriendo setup-auth.html manualmente para verificaci√≥n manual...")
        webbrowser.open('http://localhost:3000/setup-auth.html')
        return True
    
    print("\nüéâ ¬°Todas las pruebas pasaron exitosamente!")
    print("\nüìã Resumen:")
    print("   ‚úÖ Backend funcionando")
    print("   ‚úÖ Frontend funcionando")
    print("   ‚úÖ setup-auth.html disponible")
    print("   ‚úÖ Login directo funcional")
    print("   ‚úÖ Flujo autom√°tico funcional")
    print("   ‚úÖ Token guardado correctamente")
    print("   ‚úÖ Redirecci√≥n exitosa")
    
    return True

if __name__ == "__main__":
    success = test_auth_flow()
    if success:
        print("\nüöÄ El setup autom√°tico est√° listo para usar!")
        print("   Visita: http://localhost:3000/setup-auth.html")
        print("   Haz clic en 'Configurar Autenticaci√≥n Autom√°tica'")
    else:
        print("\n‚ùå Hay problemas que necesitan ser resueltos.")