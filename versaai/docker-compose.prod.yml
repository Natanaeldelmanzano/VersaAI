# VersaAI Platform - Production Docker Compose Configuration
version: '3.8'

services:
  # PostgreSQL Database - Production
  db:
    image: postgres:15-alpine
    container_name: versaai_db_prod
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-versaai}
      POSTGRES_USER: ${POSTGRES_USER:-versaai_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    volumes:
      - postgres_data_prod:/var/lib/postgresql/data
      - ./backend/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
      - ./backups:/backups
    networks:
      - versaai_network_prod
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-versaai_user} -d ${POSTGRES_DB:-versaai}"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: always
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.25'

  # Redis Cache - Production
  redis:
    image: redis:7-alpine
    container_name: versaai_redis_prod
    command: >
      redis-server
      --appendonly yes
      --requirepass ${REDIS_PASSWORD}
      --maxmemory 256mb
      --maxmemory-policy allkeys-lru
    volumes:
      - redis_data_prod:/data
    networks:
      - versaai_network_prod
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: always
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.25'
        reservations:
          memory: 256M
          cpus: '0.1'

  # FastAPI Backend - Production
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: production
    container_name: versaai_backend_prod
    environment:
      # Database Configuration
      DATABASE_URL: postgresql://${POSTGRES_USER:-versaai_user}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB:-versaai}
      
      # Redis Configuration
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379/0
      
      # Security
      SECRET_KEY: ${SECRET_KEY}
      JWT_SECRET_KEY: ${JWT_SECRET_KEY}
      
      # AI Configuration
      GROQ_API_KEY: ${GROQ_API_KEY}
      EMBEDDING_MODEL: ${EMBEDDING_MODEL:-sentence-transformers/all-MiniLM-L6-v2}
      
      # App Settings
      APP_NAME: VersaAI
      APP_VERSION: 1.0.0
      DEBUG: false
      ENVIRONMENT: production
      
      # CORS Configuration
      CORS_ORIGINS: ${CORS_ORIGINS}
      
      # File Upload
      MAX_FILE_SIZE: ${MAX_FILE_SIZE:-10485760}
      UPLOAD_DIR: /app/uploads
      
      # Rate Limiting
      RATE_LIMIT_REQUESTS: ${RATE_LIMIT_REQUESTS:-1000}
      RATE_LIMIT_WINDOW: ${RATE_LIMIT_WINDOW:-60}
      
      # Monitoring
      SENTRY_DSN: ${SENTRY_DSN}
      PROMETHEUS_ENABLED: ${PROMETHEUS_ENABLED:-true}
    volumes:
      - backend_uploads_prod:/app/uploads
      - backend_logs_prod:/app/logs
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - versaai_network_prod
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: always
    deploy:
      replicas: 2
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.25'
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s

  # Vue.js Frontend - Production
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: production
      args:
        - VITE_API_BASE_URL=${VITE_API_BASE_URL}
        - VITE_WS_URL=${VITE_WS_URL}
        - VITE_APP_NAME=VersaAI
        - VITE_APP_VERSION=1.0.0
        - VITE_ENVIRONMENT=production
    container_name: versaai_frontend_prod
    volumes:
      - frontend_dist_prod:/app/dist
    depends_on:
      - backend
    networks:
      - versaai_network_prod
    restart: always
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.25'
        reservations:
          memory: 256M
          cpus: '0.1'

  # Nginx Reverse Proxy - Production
  nginx:
    image: nginx:alpine
    container_name: versaai_nginx_prod
    volumes:
      - ./nginx/nginx.prod.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - backend_uploads_prod:/var/www/uploads:ro
      - frontend_dist_prod:/var/www/frontend:ro
      - nginx_logs_prod:/var/log/nginx
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - backend
      - frontend
    networks:
      - versaai_network_prod
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: always
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'
        reservations:
          memory: 128M
          cpus: '0.1'

  # Prometheus Monitoring (Optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: versaai_prometheus
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data_prod:/prometheus
    ports:
      - "9090:9090"
    networks:
      - versaai_network_prod
    restart: always
    profiles:
      - monitoring
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.25'

  # Grafana Dashboard (Optional)
  grafana:
    image: grafana/grafana:latest
    container_name: versaai_grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
    volumes:
      - grafana_data_prod:/var/lib/grafana
      - ./monitoring/grafana:/etc/grafana/provisioning
    ports:
      - "3001:3000"
    depends_on:
      - prometheus
    networks:
      - versaai_network_prod
    restart: always
    profiles:
      - monitoring
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'

# Named Volumes - Production
volumes:
  postgres_data_prod:
    driver: local
  redis_data_prod:
    driver: local
  backend_uploads_prod:
    driver: local
  backend_logs_prod:
    driver: local
  frontend_dist_prod:
    driver: local
  nginx_logs_prod:
    driver: local
  prometheus_data_prod:
    driver: local
  grafana_data_prod:
    driver: local

# Networks - Production
networks:
  versaai_network_prod:
    driver: bridge
    ipam:
      config:
        - subnet: 172.21.0.0/16