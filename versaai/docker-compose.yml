# VersaAI Platform - Docker Compose Configuration
version: '3.8'

services:
  # PostgreSQL Database
  db:
    image: postgres:15-alpine
    container_name: versaai_db
    environment:
      POSTGRES_DB: versaai
      POSTGRES_USER: versaai_user
      POSTGRES_PASSWORD: versaai_password
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    ports:
      - "5432:5432"
    networks:
      - versaai_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U versaai_user -d versaai"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # Redis Cache & Session Store
  redis:
    image: redis:7-alpine
    container_name: versaai_redis
    command: redis-server --appendonly yes --requirepass versaai_redis_password
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - versaai_network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # FastAPI Backend
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: versaai_backend
    environment:
      # Database Configuration
      DATABASE_URL: postgresql://versaai_user:versaai_password@db:5432/versaai
      
      # Redis Configuration
      REDIS_URL: redis://:versaai_redis_password@redis:6379/0
      
      # Security
      SECRET_KEY: ${SECRET_KEY:-versaai-dev-secret-key-change-in-production}
      JWT_SECRET_KEY: ${JWT_SECRET_KEY:-jwt-secret-key-change-in-production}
      
      # AI Configuration
      GROQ_API_KEY: ${GROQ_API_KEY}
      EMBEDDING_MODEL: ${EMBEDDING_MODEL:-sentence-transformers/all-MiniLM-L6-v2}
      
      # App Settings
      APP_NAME: VersaAI
      APP_VERSION: 1.0.0
      DEBUG: ${DEBUG:-true}
      ENVIRONMENT: ${ENVIRONMENT:-development}
      
      # CORS Configuration
      CORS_ORIGINS: ${CORS_ORIGINS:-http://localhost:5173,http://localhost:3000,http://127.0.0.1:5173}
      
      # File Upload
      MAX_FILE_SIZE: ${MAX_FILE_SIZE:-10485760}
      UPLOAD_DIR: /app/uploads
      
      # Rate Limiting
      RATE_LIMIT_REQUESTS: ${RATE_LIMIT_REQUESTS:-100}
      RATE_LIMIT_WINDOW: ${RATE_LIMIT_WINDOW:-60}
    volumes:
      - ./backend:/app
      - backend_uploads:/app/uploads
      - backend_logs:/app/logs
    ports:
      - "8000:8000"
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - versaai_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped

  # Vue.js Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: versaai_frontend
    environment:
      # API Configuration
      VITE_API_BASE_URL: ${VITE_API_BASE_URL:-http://localhost:8000/api}
      VITE_WS_URL: ${VITE_WS_URL:-ws://localhost:8000/ws}
      
      # App Configuration
      VITE_APP_NAME: VersaAI
      VITE_APP_VERSION: 1.0.0
      VITE_ENVIRONMENT: ${VITE_ENVIRONMENT:-development}
      
      # Feature Flags
      VITE_ENABLE_ANALYTICS: ${VITE_ENABLE_ANALYTICS:-false}
      VITE_ENABLE_DEBUG: ${VITE_ENABLE_DEBUG:-true}
    volumes:
      - ./frontend:/app
      - /app/node_modules
      - frontend_dist:/app/dist
    ports:
      - "5173:5173"
    depends_on:
      - backend
    networks:
      - versaai_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5173/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    restart: unless-stopped

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: versaai_nginx
    volumes:
      - ./backend/nginx.conf:/etc/nginx/nginx.conf:ro
      - backend_uploads:/var/www/uploads:ro
      - frontend_dist:/var/www/frontend:ro
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - backend
      - frontend
    networks:
      - versaai_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    profiles:
      - production

# Named Volumes
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  backend_uploads:
    driver: local
  backend_logs:
    driver: local
  frontend_dist:
    driver: local

# Networks
networks:
  versaai_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16