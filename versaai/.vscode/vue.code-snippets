{
  "Vue 3 Component with Composition API": {
    "prefix": "v3comp",
    "body": [
      "<template>",
      "  <div class=\"$1\">",
      "    <h1>{{ title }}</h1>",
      "    $0",
      "  </div>",
      "</template>",
      "",
      "<script setup lang=\"ts\">",
      "import { ref, computed, onMounted } from 'vue'",
      "",
      "// Props",
      "interface Props {",
      "  title?: string",
      "}",
      "",
      "const props = withDefaults(defineProps<Props>(), {",
      "  title: 'VersaAI Component'",
      "})",
      "",
      "// Emits",
      "const emit = defineEmits<{",
      "  update: [value: string]",
      "}>()",
      "",
      "// Reactive state",
      "const count = ref(0)",
      "",
      "// Computed",
      "const doubleCount = computed(() => count.value * 2)",
      "",
      "// Methods",
      "const increment = () => {",
      "  count.value++",
      "  emit('update', count.value.toString())",
      "}",
      "",
      "// Lifecycle",
      "onMounted(() => {",
      "  console.log('Component mounted')",
      "})",
      "</script>",
      "",
      "<style scoped>",
      "/* Component styles */",
      "</style>"
    ],
    "description": "Vue 3 component with Composition API and TypeScript"
  },
  
  "VersaAI Chat Component": {
    "prefix": "vchat",
    "body": [
      "<template>",
      "  <div class=\"chat-container bg-white rounded-lg shadow-lg p-4\">",
      "    <!-- Chat Header -->",
      "    <div class=\"chat-header border-b pb-3 mb-4\">",
      "      <h3 class=\"text-lg font-semibold text-gray-800\">{{ chatbot.name }}</h3>",
      "      <p class=\"text-sm text-gray-600\">{{ chatbot.description }}</p>",
      "    </div>",
      "",
      "    <!-- Messages Area -->",
      "    <div ref=\"messagesContainer\" class=\"messages-area h-96 overflow-y-auto mb-4 space-y-3\">",
      "      <div",
      "        v-for=\"message in messages\"",
      "        :key=\"message.id\"",
      "        :class=\"[",
      "          'message p-3 rounded-lg max-w-xs',",
      "          message.isUser ? 'ml-auto bg-blue-500 text-white' : 'bg-gray-100 text-gray-800'",
      "        ]\"",
      "      >",
      "        <p class=\"text-sm\">{{ message.content }}</p>",
      "        <span class=\"text-xs opacity-75\">{{ formatTime(message.timestamp) }}</span>",
      "      </div>",
      "      ",
      "      <!-- Typing indicator -->",
      "      <div v-if=\"isTyping\" class=\"message bg-gray-100 text-gray-800 p-3 rounded-lg max-w-xs\">",
      "        <div class=\"typing-dots flex space-x-1\">",
      "          <div class=\"dot w-2 h-2 bg-gray-400 rounded-full animate-bounce\"></div>",
      "          <div class=\"dot w-2 h-2 bg-gray-400 rounded-full animate-bounce\" style=\"animation-delay: 0.1s\"></div>",
      "          <div class=\"dot w-2 h-2 bg-gray-400 rounded-full animate-bounce\" style=\"animation-delay: 0.2s\"></div>",
      "        </div>",
      "      </div>",
      "    </div>",
      "",
      "    <!-- Input Area -->",
      "    <div class=\"input-area flex space-x-2\">",
      "      <input",
      "        v-model=\"newMessage\"",
      "        @keyup.enter=\"sendMessage\"",
      "        :disabled=\"isTyping\"",
      "        type=\"text\"",
      "        placeholder=\"Escribe tu mensaje...\"",
      "        class=\"flex-1 px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500\"",
      "      />",
      "      <button",
      "        @click=\"sendMessage\"",
      "        :disabled=\"!newMessage.trim() || isTyping\"",
      "        class=\"px-4 py-2 bg-blue-500 text-white rounded-lg hover:bg-blue-600 disabled:opacity-50 disabled:cursor-not-allowed\"",
      "      >",
      "        Enviar",
      "      </button>",
      "    </div>",
      "  </div>",
      "</template>",
      "",
      "<script setup lang=\"ts\">",
      "import { ref, nextTick, onMounted } from 'vue'",
      "import { useChatStore } from '@/stores/chat'",
      "import type { Chatbot, Message } from '@/types/chat'",
      "",
      "interface Props {",
      "  chatbot: Chatbot",
      "}",
      "",
      "const props = defineProps<Props>()",
      "const chatStore = useChatStore()",
      "",
      "// Reactive state",
      "const messages = ref<Message[]>([])",
      "const newMessage = ref('')",
      "const isTyping = ref(false)",
      "const messagesContainer = ref<HTMLElement>()",
      "",
      "// Methods",
      "const sendMessage = async () => {",
      "  if (!newMessage.value.trim()) return",
      "",
      "  const userMessage: Message = {",
      "    id: Date.now().toString(),",
      "    content: newMessage.value,",
      "    isUser: true,",
      "    timestamp: new Date()",
      "  }",
      "",
      "  messages.value.push(userMessage)",
      "  newMessage.value = ''",
      "  isTyping.value = true",
      "",
      "  await scrollToBottom()",
      "",
      "  try {",
      "    const response = await chatStore.sendMessage(props.chatbot.id, userMessage.content)",
      "    ",
      "    const botMessage: Message = {",
      "      id: (Date.now() + 1).toString(),",
      "      content: response.content,",
      "      isUser: false,",
      "      timestamp: new Date()",
      "    }",
      "",
      "    messages.value.push(botMessage)",
      "    await scrollToBottom()",
      "  } catch (error) {",
      "    console.error('Error sending message:', error)",
      "    // Handle error",
      "  } finally {",
      "    isTyping.value = false",
      "  }",
      "}",
      "",
      "const scrollToBottom = async () => {",
      "  await nextTick()",
      "  if (messagesContainer.value) {",
      "    messagesContainer.value.scrollTop = messagesContainer.value.scrollHeight",
      "  }",
      "}",
      "",
      "const formatTime = (date: Date) => {",
      "  return date.toLocaleTimeString('es-ES', { hour: '2-digit', minute: '2-digit' })",
      "}",
      "",
      "// Lifecycle",
      "onMounted(() => {",
      "  // Load chat history if needed",
      "  console.log('Chat component mounted for:', props.chatbot.name)",
      "})",
      "</script>",
      "",
      "<style scoped>",
      "@keyframes bounce {",
      "  0%, 80%, 100% {",
      "    transform: scale(0);",
      "  }",
      "  40% {",
      "    transform: scale(1);",
      "  }",
      "}",
      "",
      ".animate-bounce {",
      "  animation: bounce 1.4s infinite ease-in-out both;",
      "}",
      "</style>"
    ],
    "description": "VersaAI Chat Component with real-time messaging"
  },
  
  "Pinia Store": {
    "prefix": "vpinia",
    "body": [
      "import { defineStore } from 'pinia'",
      "import { ref, computed } from 'vue'",
      "import type { $1 } from '@/types/$2'",
      "import { api } from '@/services/api'",
      "",
      "export const use$3Store = defineStore('$4', () => {",
      "  // State",
      "  const items = ref<$1[]>([])",
      "  const loading = ref(false)",
      "  const error = ref<string | null>(null)",
      "",
      "  // Getters",
      "  const itemCount = computed(() => items.value.length)",
      "  const hasItems = computed(() => items.value.length > 0)",
      "",
      "  // Actions",
      "  const fetchItems = async () => {",
      "    loading.value = true",
      "    error.value = null",
      "    ",
      "    try {",
      "      const response = await api.get('/$5')",
      "      items.value = response.data",
      "    } catch (err) {",
      "      error.value = err instanceof Error ? err.message : 'Unknown error'",
      "      console.error('Error fetching items:', err)",
      "    } finally {",
      "      loading.value = false",
      "    }",
      "  }",
      "",
      "  const addItem = async (item: Omit<$1, 'id'>) => {",
      "    loading.value = true",
      "    error.value = null",
      "    ",
      "    try {",
      "      const response = await api.post('/$5', item)",
      "      items.value.push(response.data)",
      "      return response.data",
      "    } catch (err) {",
      "      error.value = err instanceof Error ? err.message : 'Unknown error'",
      "      console.error('Error adding item:', err)",
      "      throw err",
      "    } finally {",
      "      loading.value = false",
      "    }",
      "  }",
      "",
      "  const updateItem = async (id: string, updates: Partial<$1>) => {",
      "    loading.value = true",
      "    error.value = null",
      "    ",
      "    try {",
      "      const response = await api.put(`/$5/${id}`, updates)",
      "      const index = items.value.findIndex(item => item.id === id)",
      "      if (index !== -1) {",
      "        items.value[index] = response.data",
      "      }",
      "      return response.data",
      "    } catch (err) {",
      "      error.value = err instanceof Error ? err.message : 'Unknown error'",
      "      console.error('Error updating item:', err)",
      "      throw err",
      "    } finally {",
      "      loading.value = false",
      "    }",
      "  }",
      "",
      "  const deleteItem = async (id: string) => {",
      "    loading.value = true",
      "    error.value = null",
      "    ",
      "    try {",
      "      await api.delete(`/$5/${id}`)",
      "      items.value = items.value.filter(item => item.id !== id)",
      "    } catch (err) {",
      "      error.value = err instanceof Error ? err.message : 'Unknown error'",
      "      console.error('Error deleting item:', err)",
      "      throw err",
      "    } finally {",
      "      loading.value = false",
      "    }",
      "  }",
      "",
      "  const clearError = () => {",
      "    error.value = null",
      "  }",
      "",
      "  return {",
      "    // State",
      "    items,",
      "    loading,",
      "    error,",
      "    // Getters",
      "    itemCount,",
      "    hasItems,",
      "    // Actions",
      "    fetchItems,",
      "    addItem,",
      "    updateItem,",
      "    deleteItem,",
      "    clearError",
      "  }",
      "})",
      "",
      "$0"
    ],
    "description": "Pinia store with CRUD operations for VersaAI"
  },
  
  "Vue Router Page": {
    "prefix": "vroute",
    "body": [
      "<template>",
      "  <div class=\"page-container min-h-screen bg-gray-50\">",
      "    <!-- Page Header -->",
      "    <header class=\"bg-white shadow-sm border-b\">",
      "      <div class=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">",
      "        <div class=\"flex justify-between items-center py-6\">",
      "          <div>",
      "            <h1 class=\"text-2xl font-bold text-gray-900\">{{ pageTitle }}</h1>",
      "            <p class=\"mt-1 text-sm text-gray-600\">{{ pageDescription }}</p>",
      "          </div>",
      "          <div class=\"flex space-x-3\">",
      "            <button",
      "              @click=\"goBack\"",
      "              class=\"px-4 py-2 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-md hover:bg-gray-50\"",
      "            >",
      "              Volver",
      "            </button>",
      "            <button",
      "              @click=\"primaryAction\"",
      "              class=\"px-4 py-2 text-sm font-medium text-white bg-blue-600 border border-transparent rounded-md hover:bg-blue-700\"",
      "            >",
      "              {{ primaryActionText }}",
      "            </button>",
      "          </div>",
      "        </div>",
      "      </div>",
      "    </header>",
      "",
      "    <!-- Page Content -->",
      "    <main class=\"max-w-7xl mx-auto py-6 sm:px-6 lg:px-8\">",
      "      <div class=\"px-4 py-6 sm:px-0\">",
      "        $0",
      "      </div>",
      "    </main>",
      "  </div>",
      "</template>",
      "",
      "<script setup lang=\"ts\">",
      "import { ref, onMounted } from 'vue'",
      "import { useRouter } from 'vue-router'",
      "import { useHead } from '@vueuse/head'",
      "",
      "const router = useRouter()",
      "",
      "// Page metadata",
      "const pageTitle = ref('$1')",
      "const pageDescription = ref('$2')",
      "const primaryActionText = ref('$3')",
      "",
      "// SEO",
      "useHead({",
      "  title: pageTitle,",
      "  meta: [",
      "    { name: 'description', content: pageDescription }",
      "  ]",
      "})",
      "",
      "// Methods",
      "const goBack = () => {",
      "  router.back()",
      "}",
      "",
      "const primaryAction = () => {",
      "  // Implement primary action",
      "  console.log('Primary action triggered')",
      "}",
      "",
      "// Lifecycle",
      "onMounted(() => {",
      "  console.log('Page mounted:', pageTitle.value)",
      "})",
      "</script>",
      "",
      "<style scoped>",
      "/* Page-specific styles */",
      "</style>"
    ],
    "description": "Vue Router page template for VersaAI"
  },
  
  "API Service": {
    "prefix": "vapi",
    "body": [
      "import { api } from '@/services/api'",
      "import type { $1, Create$1Request, Update$1Request } from '@/types/$2'",
      "import type { ApiResponse, PaginatedResponse } from '@/types/api'",
      "",
      "export const $3Service = {",
      "  // Get all items with pagination",
      "  async getAll(params?: {",
      "    page?: number",
      "    limit?: number",
      "    search?: string",
      "    sortBy?: string",
      "    sortOrder?: 'asc' | 'desc'",
      "  }): Promise<PaginatedResponse<$1>> {",
      "    const response = await api.get('/$4', { params })",
      "    return response.data",
      "  },",
      "",
      "  // Get single item by ID",
      "  async getById(id: string): Promise<ApiResponse<$1>> {",
      "    const response = await api.get(`/$4/${id}`)",
      "    return response.data",
      "  },",
      "",
      "  // Create new item",
      "  async create(data: Create$1Request): Promise<ApiResponse<$1>> {",
      "    const response = await api.post('/$4', data)",
      "    return response.data",
      "  },",
      "",
      "  // Update existing item",
      "  async update(id: string, data: Update$1Request): Promise<ApiResponse<$1>> {",
      "    const response = await api.put(`/$4/${id}`, data)",
      "    return response.data",
      "  },",
      "",
      "  // Delete item",
      "  async delete(id: string): Promise<ApiResponse<void>> {",
      "    const response = await api.delete(`/$4/${id}`)",
      "    return response.data",
      "  },",
      "",
      "  // Bulk operations",
      "  async bulkDelete(ids: string[]): Promise<ApiResponse<void>> {",
      "    const response = await api.post('/$4/bulk-delete', { ids })",
      "    return response.data",
      "  },",
      "",
      "  // Search items",
      "  async search(query: string, filters?: Record<string, any>): Promise<PaginatedResponse<$1>> {",
      "    const response = await api.get('/$4/search', {",
      "      params: { q: query, ...filters }",
      "    })",
      "    return response.data",
      "  }",
      "}",
      "",
      "$0"
    ],
    "description": "API service with CRUD operations for VersaAI"
  },
  
  "TypeScript Interface": {
    "prefix": "vtype",
    "body": [
      "export interface $1 {",
      "  id: string",
      "  name: string",
      "  description?: string",
      "  createdAt: Date",
      "  updatedAt: Date",
      "  $0",
      "}",
      "",
      "export interface Create$1Request {",
      "  name: string",
      "  description?: string",
      "}",
      "",
      "export interface Update$1Request {",
      "  name?: string",
      "  description?: string",
      "}",
      "",
      "export interface $1ListItem extends Pick<$1, 'id' | 'name' | 'createdAt'> {",
      "  // Additional list-specific fields",
      "}"
    ],
    "description": "TypeScript interfaces for VersaAI entities"
  },
  
  "Vue Test": {
    "prefix": "vtest",
    "body": [
      "import { describe, it, expect, beforeEach, vi } from 'vitest'",
      "import { mount } from '@vue/test-utils'",
      "import { createPinia, setActivePinia } from 'pinia'",
      "import $1 from '@/components/$1.vue'",
      "",
      "describe('$1', () => {",
      "  beforeEach(() => {",
      "    setActivePinia(createPinia())",
      "  })",
      "",
      "  it('renders correctly', () => {",
      "    const wrapper = mount($1, {",
      "      props: {",
      "        $2",
      "      }",
      "    })",
      "",
      "    expect(wrapper.exists()).toBe(true)",
      "    expect(wrapper.text()).toContain('$3')",
      "  })",
      "",
      "  it('handles user interaction', async () => {",
      "    const wrapper = mount($1)",
      "    ",
      "    await wrapper.find('$4').trigger('click')",
      "    ",
      "    expect(wrapper.emitted()).toHaveProperty('$5')",
      "  })",
      "",
      "  it('updates reactive data', async () => {",
      "    const wrapper = mount($1)",
      "    ",
      "    // Test reactive data changes",
      "    await wrapper.setData({ $6: '$7' })",
      "    ",
      "    expect(wrapper.vm.$6).toBe('$7')",
      "  })",
      "",
      "  it('handles async operations', async () => {",
      "    const mockApi = vi.fn().mockResolvedValue({ data: 'test' })",
      "    ",
      "    const wrapper = mount($1, {",
      "      global: {",
      "        mocks: {",
      "          $api: mockApi",
      "        }",
      "      }",
      "    })",
      "    ",
      "    await wrapper.vm.$nextTick()",
      "    ",
      "    expect(mockApi).toHaveBeenCalled()",
      "  })",
      "})",
      "",
      "$0"
    ],
    "description": "Vue component test with Vitest"
  }
}