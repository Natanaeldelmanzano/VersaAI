#!/usr/bin/env python3
"""
Script simple para probar si se resolvi√≥ el problema de autenticaci√≥n autom√°tica
"""

import requests
import json
import webbrowser
import time

def test_auth_fix():
    print("üîß Probando correcci√≥n de autenticaci√≥n autom√°tica")
    print("=" * 50)
    
    # 1. Verificar login y obtener token
    print("1Ô∏è‚É£ Probando login directo...")
    try:
        login_data = {
            "email": "demo@versaai.com",
            "password": "demo123456"
        }
        response = requests.post(
            'http://localhost:8000/api/v1/auth/login',
            json=login_data,
            timeout=10
        )
        
        if response.status_code == 200:
            data = response.json()
            token = data.get('access_token')
            print(f"   ‚úÖ Login exitoso")
            print(f"   üìù Token: {token[:30]}...")
            print(f"   üë§ Usuario: {data.get('user', {}).get('email')}")
        else:
            print(f"   ‚ùå Login fall√≥: {response.status_code}")
            return False
    except Exception as e:
        print(f"   ‚ùå Error en login: {e}")
        return False
    
    # 2. Verificar endpoint /me con el token
    print("\n2Ô∏è‚É£ Probando endpoint /me...")
    try:
        headers = {'Authorization': f'Bearer {token}'}
        response = requests.get(
            'http://localhost:8000/api/v1/auth/me',
            headers=headers,
            timeout=10
        )
        
        if response.status_code == 200:
            user_data = response.json()
            print(f"   ‚úÖ Endpoint /me funcional")
            print(f"   üë§ Usuario verificado: {user_data.get('email')}")
        else:
            print(f"   ‚ùå Endpoint /me fall√≥: {response.status_code}")
            return False
    except Exception as e:
        print(f"   ‚ùå Error en /me: {e}")
        return False
    
    # 3. Verificar que setup-auth.html est√© disponible
    print("\n3Ô∏è‚É£ Verificando setup-auth.html...")
    try:
        response = requests.get('http://localhost:3000/setup-auth.html', timeout=5)
        if response.status_code == 200:
            print("   ‚úÖ setup-auth.html disponible")
            
            # Verificar que contiene las credenciales correctas
            content = response.text
            if 'demo@versaai.com' in content and 'demo123456' in content:
                print("   ‚úÖ Credenciales correctas en el archivo")
            else:
                print("   ‚ö†Ô∏è Credenciales no encontradas en el archivo")
        else:
            print(f"   ‚ùå setup-auth.html no disponible: {response.status_code}")
            return False
    except Exception as e:
        print(f"   ‚ùå Error accediendo setup-auth.html: {e}")
        return False
    
    # 4. Informaci√≥n sobre las correcciones realizadas
    print("\nüîß Correcciones realizadas:")
    print("   ‚úÖ Store de auth: Corregidas inconsistencias en localStorage")
    print("      - restoreSession ahora usa 'access_token'")
    print("      - logout ahora limpia 'access_token' y cookies")
    print("   ‚úÖ Main.js: Agregado plugin de auth con autoCheck")
    print("      - checkAuth se ejecuta autom√°ticamente al cargar")
    print("      - Monitoreo de sesi√≥n habilitado")
    print("   ‚úÖ Usuario demo creado y verificado")
    
    # 5. Abrir para prueba manual
    print("\nüåê Abriendo setup-auth.html para prueba manual...")
    webbrowser.open('http://localhost:3000/setup-auth.html')
    
    print("\nüìã Instrucciones para la prueba manual:")
    print("   1. Se abrir√° setup-auth.html en tu navegador")
    print("   2. Haz clic en 'Configurar Autenticaci√≥n Autom√°tica'")
    print("   3. Deber√≠as ver un mensaje de √©xito")
    print("   4. Despu√©s de 2 segundos, ser√°s redirigido a la p√°gina principal")
    print("   5. AHORA deber√≠as estar autenticado autom√°ticamente")
    
    print("\n‚ú® Diferencia esperada:")
    print("   ANTES: Redirig√≠a a la p√°gina principal SIN autenticar")
    print("   AHORA: Redirige a la p√°gina principal Y te autentica autom√°ticamente")
    
    return True

if __name__ == "__main__":
    success = test_auth_fix()
    if success:
        print("\nüéâ ¬°Correcci√≥n completada!")
        print("\nEl problema deber√≠a estar resuelto. El setup autom√°tico ahora:")
        print("‚Ä¢ Guarda el token como 'access_token' (consistente)")
        print("‚Ä¢ El plugin de auth ejecuta checkAuth autom√°ticamente")
        print("‚Ä¢ La aplicaci√≥n detecta el token al cargar")
        print("‚Ä¢ El usuario queda autenticado despu√©s de la redirecci√≥n")
    else:
        print("\n‚ùå A√∫n hay problemas que resolver.")